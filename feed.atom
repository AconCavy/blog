<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<id>https://aconcavy.github.io/blog</id>
	<title />
	<link rel="self" href="https://aconcavy.github.io/blog" />
	<rights>Copyright © 2020-2021 AconCavy</rights>
	<updated>2021-11-09T13:05:01Z</updated>
	<entry>
		<id>https://aconcavy.github.io/blog/posts/20210302rockpaperscissors</id>
		<title>じゃんけん</title>
		<link href="https://aconcavy.github.io/blog/posts/20210302rockpaperscissors" />
		<updated>2021-03-02T00:00:00Z</updated>
		<content>&lt;h1 id="section"&gt;はじめに&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;if&lt;/code&gt; を使わずにじゃんけんします。
じゃんけんの結果はC#8の機能の &lt;a href="https://docs.microsoft.com/ja-jp/dotnet/csharp/language-reference/operators/switch-expression"&gt;switch式&lt;/a&gt; を使って受け取ります。&lt;/p&gt;
&lt;p&gt;先駆者様&lt;/p&gt;
&lt;p&gt;&lt;a href="https://qiita.com/tadsan/items/65d91ba6b50535fc8815"&gt;https://qiita.com/tadsan/items/65d91ba6b50535fc8815&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://qiita.com/libraplanet/items/bcf17c22143dc77f875b"&gt;https://qiita.com/libraplanet/items/bcf17c22143dc77f875b&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://qiita.com/AconCavy/items/b86b9e835a362795d33f"&gt;Qiita&lt;/a&gt;とのクロスポストです。&lt;/p&gt;
&lt;h1 id="section-1"&gt;勝敗判定&lt;/h1&gt;
&lt;p&gt;じゃんけんのルールとして、&lt;code&gt;-&amp;gt;&lt;/code&gt; の右側が強いものとすると、 &lt;code&gt;Rock&lt;/code&gt; -&amp;gt; &lt;code&gt;Paper&lt;/code&gt; -&amp;gt; &lt;code&gt;Scissors&lt;/code&gt; -&amp;gt; &lt;code&gt;Rock&lt;/code&gt; の関係性が成り立ち、3つの手を周期として勝敗が決まります。
ここで、&lt;code&gt;Rock&lt;/code&gt; を0、&lt;code&gt;Paper&lt;/code&gt; を1、&lt;code&gt;Scissors&lt;/code&gt; を2として、関係性をそれぞれ1の距離を持った有効グラフだとすると、自分の手と相手の手の距離が1では負け、距離が2では勝ち、距離が0(3)ではあいこのような表現することができます。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://aconcavy.github.io/blog/assets/images/rps_dia.webp" class="img-fluid" alt="rps_dia.png"&gt;&lt;/p&gt;
&lt;p&gt;このことから、&lt;code&gt;相手の手 - 自分の手&lt;/code&gt; を計算することで距離を求めることができます。
しかし、自分の手が2で、相手の手が0だった場合、&lt;code&gt;0 - 2 == -2&lt;/code&gt;のように、距離が負数になってしまいます。このとき、じゃんけんは3つの手を周期としているため、自分の手や相手の手を3つ移動させたところで手は変わらず、勝敗は変わりません。つまり、距離に3を足したり、3で剰余を取ったとしても勝敗は変わりません。このことから、&lt;code&gt;(相手の手 - 自分の手 + 3) % 3&lt;/code&gt; とすることで、距離を0、1、2の3つにすることができ、負数と3以上になることを避けることができます。&lt;/p&gt;
&lt;h1 id="section-2"&gt;実装&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Rps&lt;/code&gt; (Rock-Paper-Scissors) クラスに &lt;code&gt;Hand&lt;/code&gt; (グー、チョキ、パー) と &lt;code&gt;Result&lt;/code&gt; (引き分け、負け、勝ち) の &lt;code&gt;enum&lt;/code&gt; を定義することで、&lt;code&gt;Battle&lt;/code&gt; 関数の引数と戻り値にそれぞれ意味を持たせます。&lt;/p&gt;
&lt;p&gt;C#の &lt;code&gt;enum&lt;/code&gt; は、既定値として &lt;code&gt;int&lt;/code&gt; の0をとり、要素が増えるにつれて1増えます。そのため、この場合は、 &lt;code&gt;Rock (0)&lt;/code&gt;、 &lt;code&gt;Paper (1)&lt;/code&gt;、 &lt;code&gt;Scissors (2)&lt;/code&gt; のようにそれぞれ値を持つことができます。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Battle&lt;/code&gt; 関数は、自分の手と相手の手を渡すことで、&lt;code&gt;Result.Draw&lt;/code&gt;、 &lt;code&gt;Result.Lose&lt;/code&gt;、 &lt;code&gt;Result.Win&lt;/code&gt; のいずれかを返します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static class Rps
{
    public enum Hand
    {
        Rock,
        Paper,
        Scissors
    }

    public enum Result
    {
        Draw,
        Lose,
        Win
    }

    public static Result Battle(Hand own, Hand opponent)
    {
        var result = ((int)opponent - (int)own + 3) % 3;
        return (Result)result;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;呼び出し側では、例に倣ってそれぞれの絵文字を割り当てます。
&lt;code&gt;switch式&lt;/code&gt; を使うことで、&lt;code&gt;Battle&lt;/code&gt; が返す可能性のあるパターンに、 &lt;code&gt;あいこ&lt;/code&gt;、&lt;code&gt;あなたの負け&lt;/code&gt;、&lt;code&gt;あなたの勝ち&lt;/code&gt; を割り当て、一致した要素を &lt;code&gt;result&lt;/code&gt; として受け、自分の手、相手の手と一緒に表示します。 &lt;code&gt;_ =&amp;gt; throw new ArgumentOutOfRangeException()&lt;/code&gt; では、対象となる値以外の値として判定された際に該当するアームになります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static class Program
{
    public static void Main()
    {
        const string draw = "あいこ";
        const string lose = "あなたの負け";
        const string win = "あなたの勝ち";

        var map = new Dictionary&amp;lt;Rps.Hand, string&amp;gt;
        {
            [Rps.Hand.Rock] = "✊", [Rps.Hand.Paper] = "🖐", [Rps.Hand.Scissors] = "✌"
        };

        // var hands = new[] { Rps.Hand.Rock, Rps.Hand.Paper, Rps.Hand.Scissors };
        var hands = Enum.GetValues(typeof(Rps.Hand)).Cast&amp;lt;Rps.Hand&amp;gt;().ToArray();

        foreach (var own in hands)
        foreach (var opponent in hands)
        {
            // Draw, Lose, Winのままなら
            // var result = Rps.Battle(own, opponent).ToString();
            
            var result = Rps.Battle(own, opponent) switch
            {
                Rps.Result.Draw =&amp;gt; draw,
                Rps.Result.Lose =&amp;gt; lose,
                Rps.Result.Win =&amp;gt; win,
                _ =&amp;gt; throw new ArgumentOutOfRangeException()
            };
            Console.WriteLine($"{map[own]} vs {map[opponent]}: {result}");
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="section-3"&gt;実行結果&lt;/h1&gt;
&lt;p&gt;&lt;img src="https://aconcavy.github.io/blog/assets/images/rps.webp" class="img-fluid" alt="rps.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://sharplab.io/#v2:C4LgTgrgdgPgAgJgIwFgBQcAMACOSAsA3OlrkgHQAyAllAI7FrpQCGAtgKYDOADiwMYdsAZRZQAJgCMA9gA90Ab3TYVuBAGZlqpWlV61CLfuw7jx/tKhdgZHOLAsA7tgC82AESAhBkAiDIGUGd4xm+hZWNng4ADbSXEJuXoBWDID6DIB2DIAFMYCKDAFGQdgh1rbYjrSuHp5JyYC7SoCGDFlMujkqAG4sYNhsLDwlUBzOACLU/MDUli0AngA8AEo8XOQAEmLiADS2AHzZQaYN+gDa07MLEuST0vwA1gC6Je6AUOTuK3sz84vkAAodHGBXcYC8G4AJu/dsI8Di9hPxqFwuNIwFxvh5ADDk7g2ZgAvoFtgB6DHYZqtAAWiy4XR6OyuCmw+2eRxO5xWlMO4jeHzAdKeDPIYIhUJh2DRyOMuOwBIkRLcAFEoBA2OQAOIcYAANRYEQg3AAFMBRjwONIAGZq+mLACURvIAGEWNYpmzFqs1aaACrSACCYAco3tjH5+l10I4Ajx2DVgukjig2GKwvEXCN3r0vrA/v4geDLWw0h4PEsHCgNkjhNj9QaW22qixOLTia4EAiNjclIAQixgMAIhw1aGoCsM1nurnHdJhMAwLQAOaeuNmQVVmt1ilPJsttsdsPdzPZ/vYLhFYDJyfGEul/SUybcWfkXoOZwuVbYexOJb7nIns+1qjRWK3qIxR9Fo96F9qzfAB1Yob0KWhf3/YwAH1XFvYA8TAUNsG6ZxXVHKUc2AAB5CBcN1SYxFHDgxVkQQeCGSx7SfPQ+T/Us8AATjVAASdwFHaHgdk7C4URxIlOI6Hj1z7YA+JAEwZ1rFF3CNdEGhRb0lL/FTsjgdQyAANjUecuGyQ89A07AcylbAGW9QyzBpM4oO2d5tRZJ9OUhaF9IY1Q1I8lRjNMtgKVfYBLKfS8HyfSgPzshpQKgZT0G9Yy8B008gJsRdW3bBl01XczFnTUTsMLTYn2nQKSjVNVaGAI0ew3GwAFogyqmqw2wABqbB1CNbAAFJOoUnI4AAdiDFLZyNaTgAGujshUlEgA==="&gt;sharplabでの実行結果&lt;/a&gt;&lt;/p&gt;
</content>
		<summary>&lt;p&gt;&lt;code&gt;if&lt;/code&gt; を使わずにじゃんけんします。
じゃんけんの結果はC#8の機能の &lt;a href="https://docs.microsoft.com/ja-jp/dotnet/csharp/language-reference/operators/switch-expression"&gt;switch式&lt;/a&gt; を使って受け取ります。&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://aconcavy.github.io/blog/posts/20210121uploadnuget</id>
		<title>GitHub ActionsからNuGetにパッケージをアップロードした</title>
		<link href="https://aconcavy.github.io/blog/posts/20210121uploadnuget" />
		<updated>2021-01-21T00:00:00Z</updated>
		<content>&lt;h1 id="section"&gt;はじめに&lt;/h1&gt;
&lt;p&gt;GitHub Actionsで.NETプロジェクトからNuGetパッケージの作成、Releaseの作成およびNuGetにパッケージをアップロードするまでをまとめた記事です。&lt;/p&gt;
&lt;p&gt;リポジトリは&lt;a href="https://github.com/AconCavy/Mulinq"&gt;こちら&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="tldr"&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GitHub ActionsでNuGetパッケージを作成した。&lt;/li&gt;
&lt;li&gt;作成したNuGetパッケージをNuGetにアップロードした。&lt;/li&gt;
&lt;li&gt;タグからリリース/プレリリースを判断できるようにした。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="net"&gt;対象の.NETプロジェクトの設定&lt;/h1&gt;
&lt;p&gt;パッケージ化する.NETプロジェクトの&lt;code&gt;.csproj&lt;/code&gt;ファイルを更新します。
今回はビルド構成として.NET 5と.NET Core 3.1のdllを生成するために、&lt;code&gt;TargetFrameworks&lt;/code&gt;に&lt;code&gt;net5.0&lt;/code&gt;と&lt;code&gt;netcoreapp3.1&lt;/code&gt;を構成します。&lt;/p&gt;
&lt;p&gt;そして、NuGetの情報を構成します。今回は&lt;code&gt;.csproj&lt;/code&gt;に構成しましたが、&lt;code&gt;.nuspec&lt;/code&gt;ファイルを作成してNuGet情報だけを切り離して構成することも可能なようです。
&lt;code&gt;PackageVersion&lt;/code&gt;はcsprojをリリースのたびに変更せずに、ビルド時にバージョンを指定できるように、&lt;code&gt;$(Version)&lt;/code&gt;の環境変数を使います。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml line-numbers"&gt;&amp;lt;Project Sdk="Microsoft.NET.Sdk"&amp;gt;

    &amp;lt;PropertyGroup&amp;gt;
        &amp;lt;TargetFrameworks&amp;gt;net5.0;netcoreapp3.1&amp;lt;/TargetFrameworks&amp;gt;
    &amp;lt;/PropertyGroup&amp;gt;
    
    &amp;lt;!-- NuGet --&amp;gt;
    &amp;lt;PropertyGroup&amp;gt;
        &amp;lt;PackageId&amp;gt;Mulinq&amp;lt;/PackageId&amp;gt;
        &amp;lt;PackageVersion&amp;gt;$(Version)&amp;lt;/PackageVersion&amp;gt;
        &amp;lt;Title&amp;gt;Mulinq&amp;lt;/Title&amp;gt;
        &amp;lt;Authors&amp;gt;AconCavy&amp;lt;/Authors&amp;gt;
        &amp;lt;Description&amp;gt;Mulinq is C# LINQ extensions for collections and for multidimensional arrays.&amp;lt;/Description&amp;gt;
        &amp;lt;PackageProjectUrl&amp;gt;https://github.com/AconCavy/Mulinq&amp;lt;/PackageProjectUrl&amp;gt;
        &amp;lt;PackageLicenseExpression&amp;gt;MIT&amp;lt;/PackageLicenseExpression&amp;gt;
        &amp;lt;RepositoryUrl&amp;gt;https://github.com/AconCavy/Mulinq&amp;lt;/RepositoryUrl&amp;gt;
        &amp;lt;PackageTags&amp;gt;LINQ&amp;lt;/PackageTags&amp;gt;
    &amp;lt;/PropertyGroup&amp;gt;

&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="nuget"&gt;NuGetの設定&lt;/h1&gt;
&lt;p&gt;NuGetアカウントを持っていない場合はアカウントの作成をします。Microsoftアカウントから作成もできるみたいです。&lt;/p&gt;
&lt;p&gt;NuGetパッケージのアップロードには、NuGetのAPIキーが必要なので、APIキーを生成します。
画面右上のユーザから、&lt;code&gt;API Keys&lt;/code&gt;のページに移動し、&lt;code&gt;Create&lt;/code&gt;フォームから、&lt;code&gt;Key Name&lt;/code&gt;や&lt;code&gt;Package Owner&lt;/code&gt;等必要な情報を埋め、APIキーを生成します。
生成に成功すると、&lt;code&gt;Manage&lt;/code&gt;パネルに生成したAPIキーが並ぶので、&lt;code&gt;Copy&lt;/code&gt;でAPIキーをコピーします。一度ページから離れてしまうと、再びコピーできなくなるので、できなくなった場合は&lt;code&gt;Regenerate&lt;/code&gt;から再生成します。&lt;/p&gt;
&lt;p&gt;コピーしたAPIキーをGitHubリポジトリの&lt;code&gt;Secrets&lt;/code&gt;に登録することで、GitHub Actionsの環境変数としてアクセスできるようになります。リポジトリの&lt;code&gt;Setting -&amp;gt; Secrets -&amp;gt; New repository secret&lt;/code&gt;で新しいシークレットを作成し、名前とAPIキーを登録します。今回は&lt;code&gt;NUGET_API_KEY&lt;/code&gt;として登録しました。&lt;/p&gt;
&lt;h1 id="workflow"&gt;Workflowの作成&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://aconcavy.github.io/blog/20201212createrepository"&gt;リポジトリを作成したときにやっておきたいこと&lt;/a&gt;のReleaseの作成をもとにWorkflowを作成します。&lt;/p&gt;
&lt;p&gt;RelaseのWorkflowを実行するトリガーとして、&lt;code&gt;v1.0.0&lt;/code&gt;や&lt;code&gt;v1.0.0-alpha&lt;/code&gt;のようなGitのタグがpushされたときに限定します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yml line-numbers"&gt;on:
  push:
    tags: 
    - 'v[0-9]+.[0-9]+.[0-9]+*'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最初にテストを実行します。今回はTargetFrameworkが複数あるため、複数の.NET SDKをセットアップします。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yml line-numbers"&gt;jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET 3.1.x
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
    - name: Setup .NET 5.0.x
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Test
      run: dotnet test -c Release --verbosity normal
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;次にテストが成功した場合のみリリースを実行します。&lt;code&gt;needs: [test]&lt;/code&gt;とすることで、&lt;code&gt;test&lt;/code&gt;のjobが成功した場合のみ実行されるようになります。
まず、プロジェクトからNuGetパッケージを作成します。このとき、&lt;code&gt;-p:Version&lt;/code&gt;にバージョンを指定します。タグのバージョン情報を取得するために、&lt;code&gt;${GITHUB_REF##*/v}&lt;/code&gt;を指定します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="line-numbers"&gt;dotnet pack ./src/Mulinq/Mulinq.csproj -c Release -p:Version=${GITHUB_REF##*/v} -o ./publish
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;GITHUB_REF&lt;/code&gt;の環境変数では、ワークフローをトリガーしたタグのrefを取得でき、&lt;code&gt;v1.0.0&lt;/code&gt;のようなタグの場合は&lt;code&gt;refs/heads/v1.0.0&lt;/code&gt;という文字列を取得できます。そこから&lt;code&gt;1.0.0&lt;/code&gt;の部分だけ取得し、&lt;code&gt;Version&lt;/code&gt;の環境変数に指定します。
ビルドに成功した場合は、&lt;code&gt;./publish&lt;/code&gt;に&lt;code&gt;Mulinq.1.0.0.nupkg&lt;/code&gt;が生成されます。&lt;/p&gt;
&lt;p&gt;そして、NuGetのAPIを叩き、作成した&lt;code&gt;.nupkg&lt;/code&gt;をアップロードします。&lt;code&gt;secrets.NUGET_API_KEY&lt;/code&gt;から、リポジトリに登録したNuGetのAPIキーを参照します。&lt;code&gt;secrets.&amp;lt;*&amp;gt;&lt;/code&gt;は上記で登録したシークレットの名前になります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yml line-numbers"&gt;release:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core 3.1.x
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
    - name: Setup .NET 5.0.x
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Build
      run: dotnet pack ./src/Mulinq/Mulinq.csproj -c Release -p:Version=${GITHUB_REF##*/v} -o ./publish
    - name: Upload to NuGet
      run: dotnet nuget push ./publish/*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;また、GitHubにReleaseを作成します。
&lt;code&gt;prerelease&lt;/code&gt;のプロパティに&lt;code&gt;true|false&lt;/code&gt;を指定することで、作成するリリースがプレリリースか否かを指定できます。そのため、タグに&lt;code&gt;-&lt;/code&gt;が含まれているかをチェックする&lt;code&gt;contains&lt;/code&gt;関数を使用して、&lt;code&gt;v1.0.0&lt;/code&gt;のような普通のリリースの場合と、&lt;code&gt;v1.0.0-alpha&lt;/code&gt;のようなプレリリースを区別できるようにしました。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yml line-numbers"&gt;- name: Create Release
  id: create_release
  uses: actions/create-release@v1
  env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  with:
    tag_name: ${{ github.ref }}
    release_name: ${{ github.ref }}
    draft: false
    prerelease: ${{ contains(github.ref, '-') }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Workflow全体としては次のようになります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yml line-numbers"&gt;name: Release

on:
  push:
    tags: 
    - 'v[0-9]+.[0-9]+.[0-9]+*'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET 3.1.x
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
    - name: Setup .NET 5.0.x
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Test
      run: dotnet test -c Release --verbosity normal
  
  release:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core 3.1.x
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
    - name: Setup .NET 5.0.x
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Build
      run: dotnet pack ./src/Mulinq/Mulinq.csproj -c Release -p:Version=${GITHUB_REF##*/v} -o ./publish
    - name: Upload to NuGet
      run: dotnet nuget push ./publish/*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="workflow-1"&gt;Workflowの実行&lt;/h1&gt;
&lt;p&gt;適当にコミットを作成し、&lt;code&gt;v0.0.1-alpha&lt;/code&gt;というタグをつけ、GitHub上にプッシュします。&lt;/p&gt;
&lt;p&gt;作成したWorkflowが実行され、テスト、ビルド、アップロード、Releaseの作成が行われます。&lt;/p&gt;
&lt;p&gt;NuGetへアップロード直後は&lt;code&gt;Unlisted Packages&lt;/code&gt;の状態でしたが、しばらくすると&lt;code&gt;Published Packages&lt;/code&gt;になりました。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://aconcavy.github.io/blog/assets/images/nuget_upload.webp" class="img-fluid" alt="succeeded upload to nuget"&gt;&lt;/p&gt;
&lt;p&gt;GitHubのリリースのほうは、ちゃんと&lt;code&gt;Pre-Release&lt;/code&gt;で作成されています。
&lt;img src="https://aconcavy.github.io/blog/assets/images/gha_prerelease.webp" class="img-fluid" alt="pre-release"&gt;&lt;/p&gt;
&lt;h1 id="section-1"&gt;まとめ&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;GitHub ActionsでNuGetパッケージを作成した。&lt;/li&gt;
&lt;li&gt;作成したNuGetパッケージをNuGetにアップロードした。&lt;/li&gt;
&lt;li&gt;タグからリリース/プレリリースを判断できるようにした。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NuGetのパッケージ作成は怖くない！&lt;/p&gt;
</content>
		<summary>&lt;p&gt;GitHub Actionsで.NETプロジェクトからNuGetパッケージの作成、Releaseの作成およびNuGetにパッケージをアップロードするまでをまとめた記事です。&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://aconcavy.github.io/blog/posts/20210103magiconion</id>
		<title>MagicOnionに入門した</title>
		<link href="https://aconcavy.github.io/blog/posts/20210103magiconion" />
		<updated>2021-02-24T00:00:00Z</updated>
		<content>&lt;h1 id="section"&gt;はじめに&lt;/h1&gt;
&lt;p&gt;友人がC#のgRPCライブラリの&lt;code&gt;MagicOnion&lt;/code&gt;の導入に苦戦してたので、手伝いながら使ってみたときにつまったところを纏めたものです。&lt;/p&gt;
&lt;p&gt;リポジトリは&lt;a href="https://github.com/AconCavy/practice-magiconion"&gt;こちら&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="magiconion"&gt;MagicOnion&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/Cysharp/MagicOnion"&gt;MagicOnion&lt;/a&gt;は、共通のインターフェースを介してクライアントとサーバーで手続きを呼び合う技術の&lt;a href="https://github.com/grpc/grpc"&gt;gRPC&lt;/a&gt;をC#用に最適化した、リアルタイム通信ライブラリです。&lt;/p&gt;
&lt;p&gt;ASP.NET CoreにもgRPCのテンプレートは存在しますが、そちらは&lt;code&gt;proto&lt;/code&gt;ファイルを作成し、そのファイルにインターフェースを定義を行います。一方MagicOnionの場合は、C#の&lt;code&gt;interface&lt;/code&gt;を定義すればめんどくさいことはMagicOnion側でいろいろやってくれるため、クライアントとサーバーでどちらもC#を利用する場合には一つのソースを使いまわすことができたりと嬉しいことが多いです。そのため、クライアントはUnity、サーバーはASP.NET Coreを使うモバイルゲームなどのプロジェクトでよく使われるそうです。&lt;/p&gt;
&lt;h1 id="section-1"&gt;環境&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Unity 2019.4.17f1&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Cysharp/MagicOnion/releases/tag/4.0.4"&gt;MagicOnion 4.0.4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/neuecc/MessagePack-CSharp/releases/tag/v2.2.85"&gt;MessagePack for C# 2.2.85&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;gRPC (&lt;a href="https://packages.grpc.io/archive/2020/12/d7b70c3ea25c48ffdae7b8bd3c757594d4fff4b6-2be69c7e-9b25-4273-a7d4-3840da2d6723/csharp/grpc_unity_package.2.35.0-dev202012021242.zip"&gt;grpc_unity_package.2.35.0-dev202012021242&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="section-2"&gt;作ってみる1&lt;/h1&gt;
&lt;p&gt;MagicOnionを使うにあたって、ASP.NET Coreでのサーバー、Unityでのクライアント、共有Apiの3つのプロジェクトを構成します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="line-numbers"&gt;MagicOnionSample/
  |- MagicOnionSample.Server/
  |- MagicOnionSample.Shared/
  |- MagicOnionSample.Unity/
  |
  |- MagicOnionSample.sln
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;MagicOnionSample.Server&lt;/code&gt;はASP.NET CoreのgRPCテンプレートで作成しました。
&lt;code&gt;MagicOnionSample.Unity&lt;/code&gt;にはUnityプロジェクトを作成します。
&lt;code&gt;MagicOnionSample.sln&lt;/code&gt;には&lt;code&gt;MagicOnionSample.Server&lt;/code&gt;と&lt;code&gt;MagicOnionSample.Shared&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;h2 id="section-3"&gt;クライアント側の準備&lt;/h2&gt;
&lt;p&gt;プロジェクトを作成したら、はじめに&lt;code&gt;Project Settings&lt;/code&gt;を以下に変更します。&lt;/p&gt;
&lt;div class="table-responsive"&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center;"&gt;Item&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;code&gt;Scripting Backend&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;code&gt;Mono&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;code&gt;Api Compatibility Level&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;code&gt;.NET 4.x&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;code&gt;Allow unsafe code&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;次に、MagicOnionとMessagePackの&lt;code&gt;unitypackage&lt;/code&gt;をプロジェクトにインポートします。
また、gRPCのパッケージから、&lt;code&gt;Google.Protobuf&lt;/code&gt;、&lt;code&gt;Grpc.Core&lt;/code&gt;、 &lt;code&gt;Grpc.Core.Api&lt;/code&gt;の3つのフォルダを&lt;code&gt;Assets/Plugins/&lt;/code&gt;にインポートします。&lt;/p&gt;
&lt;p&gt;MagicOnionとMessagePackのバージョンによってはUnityのコンパイルエラーは発生しませんが、MagicOnion 4.0.4とMessagePack 2.2.85の場合はMagicOnion側でコンパイルエラーが発生してしまいます。MessagePack 2.2.85からMessagePackの属性が含まれている名前空間が&lt;code&gt;MessagePack&lt;/code&gt;から&lt;code&gt;MessagePack.Annotations&lt;/code&gt;に変更されているようなので、&lt;code&gt;Assets/Scripts/MagicOnion.Client/MagicOnion.Client.asmdef&lt;/code&gt;の &lt;code&gt;AssemblyDefinition References&lt;/code&gt;に&lt;code&gt;MessagePack.Annotations&lt;/code&gt;の参照を追加することでコンパイルエラーを解消できます。&lt;/p&gt;
&lt;h2 id="section-4"&gt;サーバー側の準備&lt;/h2&gt;
&lt;p&gt;ASP.NET CoreのgRPCテンプレートで作成した場合、以下のような構成でプロジェクトが作成されます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="line-numbers"&gt;MagicOnionSample
  |-MagicOnionSample.Server
      |- Properties/
      |    |- launchSettings.json
      |- Protos/
      |    |- greet.proto
      |- Services/
      |    |- GreeterService.cs
      |- appsettings.json
      |- appsettings.development.json
      |- Program.cs
      |- Startup.cs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この状態から、&lt;code&gt;Protos&lt;/code&gt;ディレクトリと、&lt;code&gt;GreeterService.cs&lt;/code&gt;を削除します。
次に&lt;code&gt;Startup.cs&lt;/code&gt;の&lt;code&gt;GenericHost&lt;/code&gt;の構成にMagicOnionを追加します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.DependencyInjection;

namespace MagicOnionSample.Server
{
    public class Startup
    {
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddGrpc();
            services.AddMagicOnion(); // Here
        }

        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            app.UseRouting();
            app.UseEndpoints(endpoints =&amp;gt;
            {
                endpoints.MapMagicOnionService(); // Here
                endpoints.MapGet(&amp;quot;/&amp;quot;,
                    async context =&amp;gt;
                    {
                        await context.Response.WriteAsync(
                            &amp;quot;Communication with gRPC endpoints must be made through a gRPC client. To learn how to create a client, visit: https://go.microsoft.com/fwlink/?linkid=2086909&amp;quot;);
                    });
            });
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;また、今回は&lt;code&gt;localhost&lt;/code&gt;で通信を行うので、&lt;code&gt;appsettings.development.json&lt;/code&gt;に以下の設定を追加します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json line-numbers"&gt;...
&amp;quot;Kestrel&amp;quot;: {
    &amp;quot;Endpoints&amp;quot;: {
      &amp;quot;Grpc&amp;quot;: {
        &amp;quot;Url&amp;quot;: &amp;quot;http://localhost:5000&amp;quot;,
        &amp;quot;Protocols&amp;quot;: &amp;quot;Http2&amp;quot;
      },
      &amp;quot;Https&amp;quot;: {
        &amp;quot;Url&amp;quot;: &amp;quot;https://localhost:5001&amp;quot;,
        &amp;quot;Protocols&amp;quot;: &amp;quot;Http1AndHttp2&amp;quot;
      },
      &amp;quot;Http&amp;quot;: {
        &amp;quot;Url&amp;quot;: &amp;quot;http://localhost:5002&amp;quot;,
        &amp;quot;Protocols&amp;quot;: &amp;quot;Http1&amp;quot;
      }
    }
  }
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;また、&lt;code&gt;Program.cs&lt;/code&gt;の&lt;code&gt;CreateHostBuilder&lt;/code&gt;に&lt;code&gt;Kestrel&lt;/code&gt;とHttp2を使うための設定を追加します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Server.Kestrel.Core;
using Microsoft.Extensions.Hosting;

namespace MagicOnionSample.Server
{
    public class Program
    {
        public static void Main(string[] args)
        {
            CreateHostBuilder(args).Build().Run();
        }

        public static IHostBuilder CreateHostBuilder(string[] args)
        {
            return Host.CreateDefaultBuilder(args)
                .ConfigureWebHostDefaults(webBuilder =&amp;gt; webBuilder
                    .UseKestrel(options =&amp;gt; options.ConfigureEndpointDefaults(endpointOptions =&amp;gt;
                        endpointOptions.Protocols = HttpProtocols.Http2))
                    .UseStartup&amp;lt;Startup&amp;gt;());
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Httpsで通信を行う場合は、&lt;a href="https://docs.microsoft.com/ja-jp/aspnet/core/security/enforcing-ssl?view=aspnetcore-5.0&amp;amp;tabs=visual-studio"&gt;こちら&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;h2 id="api"&gt;共有Apiの定義&lt;/h2&gt;
&lt;p&gt;Unityに戻り、MagicOnionで使用する&lt;code&gt;interface&lt;/code&gt;やモデルクラス類を作成します。
今回は&lt;code&gt;Assets/MagicOnionSample/Scripts/Shared/&lt;/code&gt;に共有Apiを構成します。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Shared&lt;/code&gt;ディレクトリに&lt;code&gt;ISampleService.cs&lt;/code&gt;を作成し,&lt;code&gt;string&lt;/code&gt;の値を渡すと挨拶の&lt;code&gt;string&lt;/code&gt;を返す&lt;code&gt;interface&lt;/code&gt;を定義します。また、この&lt;code&gt;interface&lt;/code&gt;には&lt;code&gt;IService&amp;lt;T&amp;gt;&lt;/code&gt;もあわせて定義します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;using MagicOnion;

namespace MagicOnionSample.Shared
{
    public interface ISampleService : IService&amp;lt;ISampleService&amp;gt;
    {
        UnaryResult&amp;lt;string&amp;gt; GreetAsync(string name);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="section-5"&gt;クライアント側の実装&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Shared&lt;/code&gt;ディレクトリでは、クライアントとサーバーで共有できるクラスやインターフェースのみを持たせるために、&lt;code&gt;Shared&lt;/code&gt;ディレクトリとは別に、&lt;code&gt;Assets/MagicOnionSample/Scripts/Unity/&lt;/code&gt;を作成し、名前空間と実装を分離します。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Unity&lt;/code&gt;ディレクトリに&lt;code&gt;SampleEntryPoint.cs&lt;/code&gt;を作成し、サーバーにローカルホストでアクセスする実装をします。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MagicOnionClient&lt;/code&gt;から&lt;code&gt;ISampleService&lt;/code&gt;のエンドポイントに対して、上記で定義した&lt;code&gt;GreetAsync&lt;/code&gt;を&lt;code&gt;interface&lt;/code&gt;経由で呼び、結果を&lt;code&gt;Debug.Log&lt;/code&gt;に表示させます。
&lt;code&gt;interface&lt;/code&gt;経由で呼ぶことで、クライアント側は実装を気にする必要がありません。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;using System.Threading.Tasks;
using Grpc.Core;
using MagicOnion.Client;
using MagicOnionSample.Shared;
using UnityEngine;

namespace MagicOnionSample.Unity
{
    public class SampleEntryPoint : MonoBehaviour
    {
        public string host = &amp;quot;localhost&amp;quot;;
        public int port = 5000;

        public string user = &amp;quot;Foo&amp;quot;;
        public string room = &amp;quot;Bar&amp;quot;;

        private Channel _channel;

        private async Task Start()
        {
            _channel = new Channel(host, port, ChannelCredentials.Insecure);

            var client = MagicOnionClient.Create&amp;lt;ISampleService&amp;gt;(_channel);
            var greet = await client.GreetAsync(user);
            Debug.Log(greet);
        }

        private async Task OnDestroy()
        {
            await _channel.ShutdownAsync();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作成後、UnityのHierarchyに適当なGameObjectを作成し、&lt;code&gt;SampleEntryPoint&lt;/code&gt;を付与します。&lt;/p&gt;
&lt;h2 id="api-1"&gt;サーバー側における共有Api&lt;/h2&gt;
&lt;p&gt;Unityがコンパイルできるスクリプトは&lt;code&gt;Assets/&lt;/code&gt;以下にあるものに限るため、サーバー側で共有Api用のプロジェクトを作成すると不整合がおきてしまうかもしれません。そのため、&lt;code&gt;MagicOnionSample.Shared&lt;/code&gt;のプロジェクトでは、中身を実際には持たずに、上記で作成したUnityプロジェクト内の&lt;code&gt;Assets/MagicOnionSample/Scripts/Shared&lt;/code&gt;ディレクトリにあるスクリプトを参照することでサーバー側でも共有Apiとして使えるようにします。&lt;/p&gt;
&lt;p&gt;そのため、&lt;code&gt;MagicOnionSample.Shared&lt;/code&gt;のディレクトリ構成は以下のようになります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="line-numbers"&gt;MagicOnionSample
  |-MagicOnionSample.Shared
      |-MagicOnionSample.Shared.csproj
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;nugetから&lt;code&gt;MagicOnion&lt;/code&gt;、&lt;code&gt;MagicOnion.Abstractions&lt;/code&gt;、&lt;code&gt;MessagePack&lt;/code&gt;、&lt;code&gt;MessagePack.UnityShims&lt;/code&gt;をインストールします。
&lt;code&gt;MessagePack.UnityShims&lt;/code&gt;をインストールすることで、UnityEngineのApiを利用することができるため、&lt;code&gt;Vector3&lt;/code&gt;や&lt;code&gt;Quatarnion&lt;/code&gt;などを使う場合はインストールします。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;Compile Include=&amp;quot;path/to/file&amp;quot;/&amp;gt;&lt;/code&gt;を定義することで、指定したパスのファイルをコンパイルに含めることができます。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;csproj&lt;/code&gt;は以下のようになります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml line-numbers"&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;

    &amp;lt;PropertyGroup&amp;gt;
        &amp;lt;TargetFramework&amp;gt;netcoreapp3.1&amp;lt;/TargetFramework&amp;gt;
    &amp;lt;/PropertyGroup&amp;gt;

    &amp;lt;ItemGroup&amp;gt;
        &amp;lt;PackageReference Include=&amp;quot;MagicOnion&amp;quot; Version=&amp;quot;4.0.4&amp;quot; /&amp;gt;
        &amp;lt;PackageReference Include=&amp;quot;MagicOnion.Abstractions&amp;quot; Version=&amp;quot;4.0.4&amp;quot; /&amp;gt;
        &amp;lt;PackageReference Include=&amp;quot;MessagePack&amp;quot; Version=&amp;quot;2.2.85&amp;quot; /&amp;gt;
        &amp;lt;PackageReference Include=&amp;quot;MessagePack.UnityShims&amp;quot; Version=&amp;quot;2.2.85&amp;quot; /&amp;gt;
    &amp;lt;/ItemGroup&amp;gt;

    &amp;lt;ItemGroup&amp;gt;
        &amp;lt;Compile Include=&amp;quot;../MagicOnionSample.Unity/Assets/MagicOnionSample/Scripts/Shared/**/*.cs&amp;quot; /&amp;gt;
    &amp;lt;/ItemGroup&amp;gt;

&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="section-6"&gt;サーバー側の実装&lt;/h2&gt;
&lt;p&gt;上記で準備した共有Apiのプロジェクトをサーバー側のプロジェクトで参照することで、Unity上で定義した&lt;code&gt;ISampleService&lt;/code&gt;を利用することができるようになります。
&lt;code&gt;SampleService.cs&lt;/code&gt;を作成し、&lt;code&gt;ISampleService&lt;/code&gt;の実装を行います。
簡単な文字列を返すように実装しました。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;using System;
using MagicOnion;
using MagicOnion.Server;
using MagicOnionSample.Shared;

namespace MagicOnionSample.Server.Services
{
    public class SampleService : ServiceBase&amp;lt;ISampleService&amp;gt;, ISampleService
    {
        public async UnaryResult&amp;lt;string&amp;gt; GreetAsync(string name)
        {
            await Console.Out.WriteLineAsync(name);
            return $&amp;quot;Welcome {name}!&amp;quot;;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="section-7"&gt;動作確認&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;dotnet run&lt;/code&gt;コマンド等でサーバーを起動し、&lt;code&gt;SampleEntryPoint&lt;/code&gt;が適当なGameObjectに付与されているのを確認した後にUnityを実行し、UnityのConsoleに&lt;code&gt;Welcome Foo!&lt;/code&gt;と表示されたら成功です。
以上で、サーバーとクライアントの1対1のApiコールができました。&lt;/p&gt;
&lt;h1 id="section-8"&gt;作ってみる2&lt;/h1&gt;
&lt;p&gt;前の項では、サーバーとクライアントの1対1のApiコールを実装しました。次に、サーバーとクライアントの1対多のApiコールを実装します。
マルチプレイでプレイヤーの座標をリアルタイムで同期させるといったことが用途としてあげられます。&lt;/p&gt;
&lt;p&gt;今回は、プレイヤーが部屋に参加したかどうかを知らせるApiを実装します。&lt;/p&gt;
&lt;h2 id="api-2"&gt;共有Apiの定義&lt;/h2&gt;
&lt;p&gt;初めに、&lt;code&gt;Player&lt;/code&gt;を一つのモデルとして管理するために、&lt;code&gt;Shared&lt;/code&gt;ディレクトリに&lt;code&gt;Player.cs&lt;/code&gt;を作成します。
&lt;code&gt;MessagePackObject&lt;/code&gt;の属性をクラスや構造体に付与することで、MessagePackがシリアライズできるようになり、&lt;code&gt;Key&lt;/code&gt;によってそれぞれのプロパティを管理します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;using MessagePack;

namespace MagicOnionSample.Shared
{
    [MessagePackObject]
    public class Player
    {
        [Key(0)] public string Name { get; set; }
        [Key(1)] public string Room { get; set; }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;次に、&lt;code&gt;Shared&lt;/code&gt;ディレクトリに&lt;code&gt;ISampleHubReceiver.cs&lt;/code&gt;を作成します。
&lt;code&gt;Player&lt;/code&gt;が部屋に参加したことを知らせるコールバークとしての&lt;code&gt;interface&lt;/code&gt;を定義します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;namespace MagicOnionSample.Shared
{
    public interface ISampleHubReceiver
    {
        void OnJoin(Player player);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;また、&lt;code&gt;Shared&lt;/code&gt;ディレクトリに&lt;code&gt;ISampleHub.cs&lt;/code&gt;を作成します。
&lt;code&gt;name&lt;/code&gt;と&lt;code&gt;room&lt;/code&gt;を渡すことで、部屋に参加する&lt;code&gt;interface&lt;/code&gt;を定義します。この&lt;code&gt;interface&lt;/code&gt;には&lt;code&gt;IStreamingHub&amp;lt;T, U&amp;gt;&lt;/code&gt;もあわせて定義します。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ISampleService&lt;/code&gt;と同じようにApiコール用の&lt;code&gt;interface&lt;/code&gt;です。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;using System.Threading.Tasks;
using MagicOnion;

namespace MagicOnionSample.Shared
{
    public interface ISampleHub : IStreamingHub&amp;lt;ISampleHub, ISampleHubReceiver&amp;gt;
    {
        Task JoinAsync(string name, string room);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これらのApiコールのの流れとして、&lt;code&gt;ISampleHub&lt;/code&gt;の&lt;code&gt;JoinAsync&lt;/code&gt;を呼ぶことで、サーバーに名前と部屋名を渡し、サーバー側の処理が完了すると&lt;code&gt;ISampleHubReceiver&lt;/code&gt;の&lt;code&gt;OnJoin&lt;/code&gt;がコールバックとして呼ばれる形になります。&lt;/p&gt;
&lt;h2 id="section-9"&gt;クライアント側の実装&lt;/h2&gt;
&lt;p&gt;クライアント側では、&lt;code&gt;ISampleHubReceiver&lt;/code&gt;を実装した&lt;code&gt;SampleHubReceiver&lt;/code&gt;を作成します。
&lt;code&gt;Unity&lt;/code&gt;ディレクトリに&lt;code&gt;SampleHubReceiver.cs&lt;/code&gt;を作成し、コールバックの内容を実装します。
&lt;code&gt;Player&lt;/code&gt;が参加したら&lt;code&gt;Player&lt;/code&gt;の&lt;code&gt;Name&lt;/code&gt;と&lt;code&gt;Room&lt;/code&gt;がUnityのConsoleに表示されます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;using MagicOnionSample.Shared;
using UnityEngine;

namespace MagicOnionSample.Unity
{
    public class SampleHubReceiver : ISampleHubReceiver
    {
        public void OnJoin(Player player)
        {
            Debug.Log($&amp;quot;{player.Name}, {player.Room}&amp;quot;);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上記で作成した&lt;code&gt;SampleEntryPoint.cs&lt;/code&gt;を更新します。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Channel&lt;/code&gt;と&lt;code&gt;ISampleReceiver&lt;/code&gt;のインスタンスを&lt;code&gt;StreamingHubClient.Connect&lt;/code&gt;に渡すことで、&lt;code&gt;ISampleHub&lt;/code&gt;を実装したインスタンスを得ることができます。このインスタンスはサーバー側で実装されるので、クライアント側は気にする必要がありません。
&lt;code&gt;ISampleHub&lt;/code&gt;のインスタンスを使って&lt;code&gt;JoinAsync&lt;/code&gt;を呼ぶことで、サーバー側に&lt;code&gt;name&lt;/code&gt;と&lt;code&gt;room&lt;/code&gt;を渡すことができ、コールバックとして&lt;code&gt;SampleHubReceiver&lt;/code&gt;の&lt;code&gt;OnJoin&lt;/code&gt;に&lt;code&gt;Player&lt;/code&gt;のインスタンスが渡されます。
また、&lt;code&gt;ISampleHub&lt;/code&gt;は&lt;code&gt;IDisposable&lt;/code&gt;なので、忘れずに&lt;code&gt;Dispose&lt;/code&gt;でリソースを解放します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;using System.Threading.Tasks;
using Grpc.Core;
using MagicOnion.Client;
using MagicOnionSample.Shared;
using UnityEngine;

namespace MagicOnionSample.Unity
{
    public class SampleEntryPoint : MonoBehaviour
    {
        public string host = &amp;quot;localhost&amp;quot;;
        public int port = 5000;

        public string user = &amp;quot;Foo&amp;quot;;
        public string room = &amp;quot;Bar&amp;quot;;

        private Channel _channel;

        // Here
        private ISampleHub _hub;
        private ISampleHubReceiver _receiver;

        private async Task Start()
        {
            _channel = new Channel(host, port, ChannelCredentials.Insecure);

            var client = MagicOnionClient.Create&amp;lt;ISampleService&amp;gt;(_channel);
            var greet = await client.GreetAsync(user);
            Debug.Log(greet);

            // Here
            _receiver = new SampleHubReceiver();
            _hub = StreamingHubClient.Connect&amp;lt;ISampleHub, ISampleHubReceiver&amp;gt;(_channel, _receiver);
            await _hub.JoinAsync(user, room);
        }

        private async Task OnDestroy()
        {
            await _hub.DisposeAsync(); // Here
            await _channel.ShutdownAsync();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="section-10"&gt;サーバー側の実装&lt;/h2&gt;
&lt;p&gt;サーバー側では&lt;code&gt;ISampleHub&lt;/code&gt;の実装を行います。
&lt;code&gt;SampleHub.cs&lt;/code&gt;を作成し、&lt;code&gt;name&lt;/code&gt;と&lt;code&gt;room&lt;/code&gt;が与えられたら&lt;code&gt;Player&lt;/code&gt;を作成して返すといった実装を行います。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Broadcast&lt;/code&gt;に&lt;code&gt;IGroup&lt;/code&gt;のインスタンスを渡すことで、グループ内のすべてのクライアントに対してコールバックを呼ぶことができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;using System;
using System.Threading.Tasks;
using MagicOnion.Server.Hubs;
using MagicOnionSample.Shared;

namespace MagicOnionSample.Server.Hubs
{
    public class SampleHub : StreamingHubBase&amp;lt;ISampleHub, ISampleHubReceiver&amp;gt;, ISampleHub
    {
        private Player _player;
        private IGroup _room;

        public async Task JoinAsync(string name, string room)
        {
            _player = new Player {Name = name, Room = room};
            await Console.Out.WriteLineAsync($&amp;quot;Join {_player.Name} to the {_player.Room}&amp;quot;);
            (_room, _) = await Group.AddAsync(_player.Room, _player);
            Broadcast(_room).OnJoin(_player);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="section-11"&gt;動作確認&lt;/h2&gt;
&lt;p&gt;上記の動作確認と同じように、&lt;code&gt;dotnet run&lt;/code&gt;コマンド等でサーバーを起動してUnityを実行すると、UnityのConsoleに&lt;code&gt;Welcome Foo!&lt;/code&gt;と&lt;code&gt;Foo, bar&lt;/code&gt;表示されたら成功です。
また、サーバー側のConsoleでは&lt;code&gt;Join Foo to the Bar&lt;/code&gt;と表示されます。
以上で、サーバーとクライアントの1対多のApiコールができました。&lt;/p&gt;
&lt;h1 id="section-12"&gt;その他注意点&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt;や&lt;code&gt;Array&amp;lt;T&amp;gt;&lt;/code&gt;などをMessagePackに渡す場合は、シリアライズの時に&lt;code&gt;null&lt;/code&gt;の場合、エラーが発生することがあります。プロパティの初期化子を使って初期化をすることで、シリアライズでエラーを回避することができます。&lt;/p&gt;
&lt;p&gt;自作クラスのコンストラクタを実装する場合、コンストラクタ引数がないコンストラクタをMessagePackに渡すと、シリアライズ時にエラーが発生するため、引数があるコンストラクタに加えて、引数がないコンストラクタを作成する必要があります。&lt;/p&gt;
&lt;h1 id="section-13"&gt;まとめ&lt;/h1&gt;
&lt;p&gt;MagicOnionを使ってリアルタイム通信の世界に入門しました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UnityプロジェクトにインストールしたMagicOnionとMessagePackでコンパイルエラーが発生する場合は&lt;code&gt;MagicOnion.Client&lt;/code&gt;に&lt;code&gt;MessagePack.Annotations&lt;/code&gt;を追加する&lt;/li&gt;
&lt;li&gt;1対1では&lt;code&gt;IService&amp;lt;T&amp;gt;&lt;/code&gt;を使う&lt;/li&gt;
&lt;li&gt;1対多では&lt;code&gt;IStreamingHub&amp;lt;T, U&amp;gt;&lt;/code&gt;を使う&lt;/li&gt;
&lt;li&gt;MessagePackでは&lt;code&gt;null&lt;/code&gt;に注意&lt;/li&gt;
&lt;li&gt;MessagePackではコンストラクタに注意&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;マルチプレイのゲームを作るときには有効活用したいです。&lt;/p&gt;
</content>
		<summary>&lt;p&gt;友人がC#のgRPCライブラリの&lt;code&gt;MagicOnion&lt;/code&gt;の導入に苦戦してたので、手伝いながら使ってみたときにつまったところを纏めたものです。&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://aconcavy.github.io/blog/posts/20201212createrepository</id>
		<title>リポジトリを作成したときにやっておきたいこと</title>
		<link href="https://aconcavy.github.io/blog/posts/20201212createrepository" />
		<updated>2020-12-13T00:00:00Z</updated>
		<content>&lt;h1 id="section"&gt;これ何&lt;/h1&gt;
&lt;p&gt;リポジトリを作成したときにやっておくと後々楽になるかもしれないことをまとめたメモです。&lt;/p&gt;
&lt;h1 id="section-1"&gt;開発環境ごとの差異をなくすために&lt;/h1&gt;
&lt;p&gt;開発者によってOSやエディタ等の開発環境が異なるのでルールを決めます。&lt;/p&gt;
&lt;h2 id="git-config"&gt;git config&lt;/h2&gt;
&lt;p&gt;WindowsとMacOS / LinuxではOSにより行の終端が異なるため、何も変更していないつもりでも、OSが異なるとdiffが発生してしまう場合があります。それを避けるために、Gitの設定でbranchをcheckoutしたときに、ファイルをどの形式で認識するかを設定します。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;core.autocrlf&lt;/code&gt;を&lt;code&gt;true&lt;/code&gt;にすると、ファイル形式が&lt;code&gt;CRLF&lt;/code&gt;と&lt;code&gt;LF&lt;/code&gt;のどちらであってもcheckout時に&lt;code&gt;CRLF&lt;/code&gt;に変換され、commit時には自動的に&lt;code&gt;LF&lt;/code&gt;へと変換されます。
また、&lt;code&gt;core.autocrlf&lt;/code&gt;を&lt;code&gt;input&lt;/code&gt;にすると、&lt;code&gt;LF&lt;/code&gt;のままcheckoutとcommitが行われます。
そのため、Windowsでは&lt;code&gt;true&lt;/code&gt;、MacOS / Linuxでは&lt;code&gt;input&lt;/code&gt;を指定しておくといいでしょう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-powershell line-numbers"&gt;git config --global core.autocrlf true
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Mac OS / Linux&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-sh line-numbers"&gt;git config --global core.autocrlf input
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="gitattributes"&gt;.gitattributes&lt;/h2&gt;
&lt;p&gt;リポジトリ単位で行の終端処理を行う場合は、&lt;code&gt;.gitattributes&lt;/code&gt;をリポジトリのルートに作成して設定を行うことで、&lt;code&gt;core.autocrlf&lt;/code&gt;を設定していない開発者がいてもGitが自動的にファイルの終端を変更してくれます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="line-numbers"&gt;* text=auto
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;.gitattributes&lt;/code&gt;には&lt;a href="https://git-lfs.github.com/"&gt;GitLFS&lt;/a&gt;の設定をすることもできるので、音声や画像、データセットなどの容量が大きなファイルはLFSの設定をするといいかもしれません。&lt;/p&gt;
&lt;p&gt;その他詳しくは&lt;a href="https://docs.github.com/ja/free-pro-team@latest/github/using-git/configuring-git-to-handle-line-endings"&gt;こちら (GitHub Docs, 行終端を処理するようGitを設定する)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="gitignore"&gt;.gitignore&lt;/h2&gt;
&lt;p&gt;プロジェクトの生成物やエディタが生成するファイルなど、プロジェクトに関わりのないファイルやディレクトリを指定しましょう。&lt;/p&gt;
&lt;p&gt;エディタの設定ファイルに関しては、リポジトリに開発者ごとのエディタ設定を無視させるのではなく、開発者自身が&lt;code&gt;.gitignore_global&lt;/code&gt;を設定した方がいいかもしれません。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-powershell line-numbers"&gt;git config --global core.excludesfile core.excludesfile path/to/.gitignore_global
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;MacOS / Linux&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-sh line-numbers"&gt;git config --global core.excludesfile core.excludesfile ~/.gitignore_global
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="editorconfig"&gt;.editorconfig&lt;/h2&gt;
&lt;p&gt;エディタによってインデントのサイズやコードスタイルなどのフォーマットの設定が変わります。ファイルごとにバラバラなフォーマットが適用されてしまうことを避けるために&lt;a href="https://editorconfig.org/"&gt;EditorConfig&lt;/a&gt;を利用して、フォーマットスタイルを統一させます。EditorConfigはJetbrainsのIDEやVisualStudio等のIDEでは標準で搭載しており、Visual Studio Codeなどのエディタでもプラグインをインストールすることで利用することができるようになります。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.editorconfig&lt;/code&gt;を作成し、エディタのフォーマット機能やEditorConfig対応のcliを利用することで、そのリポジトリのファイルを決まったルールでフォーマットすることができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="line-numbers"&gt;root = true

# すべてのファイル
[*]
end_of_line = lf              # フォーマット時に終端をLFに変換 .gitattributesで指定してるならいらないかも
charset = utf-8
insert_final_newline = true   # ファイルの最後に改行
indent_style = space          # インデントはスペースで
indent_size = 4               # インデント4

# jsonとymlファイル
[*.{json, yml}]
indent_size = 2               # インデント2
...
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="ci-cd"&gt;CI / CD&lt;/h1&gt;
&lt;p&gt;Unit Testや正しくファイルがフォーマットされているかのチェック、Releaseの作成、デプロイ等を自動化することによって、繰り返しの作業が楽になるので可能ならやっておきたいです。&lt;/p&gt;
&lt;p&gt;以下dotnetのプロジェクトをGitHub ActionsでWorkflowを構築した場合の場合&lt;/p&gt;
&lt;h2 id="unit-test"&gt;Unit test&lt;/h2&gt;
&lt;p&gt;GitHub Workflowの&lt;code&gt;.NET Core&lt;/code&gt;を選択すれば必要最低限のWorkflowは実現できます。&lt;/p&gt;
&lt;p&gt;リポジトリにコミットされた際にテストを実行し、一つでもテストが通らなかった場合は以下のように確認することができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yml line-numbers"&gt;name: Unit Test

on: [push, pull_request]

jobs:
  test:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET 5
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Install dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --configuration Release --no-restore
    - name: Test
      run: dotnet test --no-restore --verbosity normal
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://aconcavy.github.io/blog/assets/images/gha_test_fail.webp" class="img-fluid" alt="github action test failed"&gt;&lt;/p&gt;
&lt;h2 id="code-format"&gt;Code format&lt;/h2&gt;
&lt;p&gt;EditorConfigを設定しているとdotnet toolの&lt;code&gt;dotnet-format&lt;/code&gt;を使うことでEditorConfigに合ったファイルのフォーマットの確認ができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sh line-numbers"&gt;dotnet tool update -g dotnet-format
dotnet format --check
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;GitHub Workflowの&lt;code&gt;.NET Core&lt;/code&gt;をベースにフォーマットを実行し、1つでもファイルがフォーマットされればWorkflowを失敗させるWorkflowを作成します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yml line-numbers"&gt;name: Lint

on: [push, pull_request]

jobs:
  format:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Install dotnet-format
      run: dotnet tool update -g dotnet-format
    - name: Lint
      run: dotnet format --check --verbosity diagnostic
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://aconcavy.github.io/blog/assets/images/gha_lint_fail.webp" class="img-fluid" alt="github action lint failed"&gt;&lt;/p&gt;
&lt;h1 id="release"&gt;Releaseの作成&lt;/h1&gt;
&lt;p&gt;Releaseでは、Release用のTagがpushされたときに成果物をリポジトリのReleaseにアップロードします。次の例では.dllファイルをアップロードします。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yml line-numbers"&gt;name: Release

on:
  push:
    tags: 
    - 'v[0-9]+.[0-9]+.[0-9]+*' # v0.0.1のようなTagがpushされたとき

jobs:  
  release:
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    
    # Build
    - uses: actions/checkout@v2
    - name: Setup .NET 5
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Build
      run: dotnet build -c Release
    
    # リリースを作成
    - name: Create Release 
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        # body |
        # hoge hoge # Releaseコメント
        draft: false
        prerelease: false

    # リリースの成果物にHello.dllを追加
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./src/Hello/bin/Release/net5.0/Hello.dll
        asset_name: Hello.dll
        asset_content_type: application/octet-stream # .dllファイルのcontent type
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Workflowを実行すると次のようなReleaseが作成されます。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://aconcavy.github.io/blog/assets/images/gha_release.webp" class="img-fluid" alt="github action release"&gt;&lt;/p&gt;
&lt;h1 id="section-2"&gt;まとめ&lt;/h1&gt;
&lt;p&gt;リポジトリを作った初めに設定を色々とやっておくと後々楽ができるかもしれません。
開発環境の差異をなくすための設定だけでもやっておくと混沌度が下がると思います。&lt;/p&gt;
</content>
		<summary>&lt;p&gt;リポジトリを作成したときにやっておくと後々楽になるかもしれないことをまとめたメモです。&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://aconcavy.github.io/blog/posts/20201129dotnettemplate</id>
		<title>dotnet newのカスタムテンプレート</title>
		<link href="https://aconcavy.github.io/blog/posts/20201129dotnettemplate" />
		<updated>2020-12-08T00:00:00Z</updated>
		<content>&lt;h1 id="section"&gt;はじめに&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/AconCavy/CompetitiveProgrammingTemplateCSharp"&gt;競プロ用のプロジェクトテンプレート&lt;/a&gt;を整備したので、&lt;code&gt;dotnet new&lt;/code&gt;のカスタムテンプレート作成の備忘録です。&lt;/p&gt;
&lt;h1 id="dotnet-new"&gt;dotnet new のカスタムテンプレートとは&lt;/h1&gt;
&lt;p&gt;公式の情報は&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/core/tools/custom-templates"&gt;こちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NETのプロジェクトを作成する際、&lt;code&gt;dotnet&lt;/code&gt;コマンドを利用してプロジェクトを生成します。
例えば、コンソールアプリケーションを作成する場合、&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sh line-numbers"&gt;dotnet new console -n Sample
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;のようなコマンドを実行することで、&lt;code&gt;Sample&lt;/code&gt;という名称のプロジェクトが作成されます。
これは、&lt;code&gt;dotnet new&lt;/code&gt;コマンドで、&lt;code&gt;console&lt;/code&gt;というデフォルトテンプレートを使ってプロジェクトを生成するという意味になります。&lt;/p&gt;
&lt;p&gt;この&lt;code&gt;dotnet new&lt;/code&gt;コマンドに、プロジェクトやスクリプトをカスタムテンプレートとして登録しておくことで、プロジェクトやファイルの作成を使いまわすことができます。&lt;/p&gt;
&lt;p&gt;既定のテンプレートとして、&lt;code&gt;dotnet new&lt;/code&gt;コマンドに&lt;code&gt;-l|--list&lt;/code&gt;オプションをつけて実行すると、現在インストールされている&lt;code&gt;dotnet new&lt;/code&gt;コマンドで生成できるテンプレートを確認することができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sh line-numbers"&gt;dotnet new -l
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="section-1"&gt;作ってみる&lt;/h1&gt;
&lt;p&gt;テンプレートの基本として、テンプレート化したいプロジェクトのディレクトリ下に、&lt;code&gt;.template.config&lt;/code&gt;のディレクトリを作成し、さらにその下に、&lt;code&gt;template.json&lt;/code&gt;を作成します。
そして、&lt;code&gt;template.json&lt;/code&gt;にプロパティを設定し、&lt;code&gt;dotnet new&lt;/code&gt;コマンドを使ってインストールすることで、テンプレートを使うことができるようになります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sh line-numbers"&gt;dotnet new -i path-to-template
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;競技プロ用のプロジェクトテンプレートでは、次の3つをテンプレートとして準備します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プロジェクト&lt;/li&gt;
&lt;li&gt;解答用のクラス&lt;/li&gt;
&lt;li&gt;テスト用のクラス&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-2"&gt;プロジェクトのテンプレート&lt;/h2&gt;
&lt;p&gt;プロジェクトでは、解答用のクラスとテスト用クラスを配置するための骨組みとしてのプロジェクトを生成するようにします。&lt;/p&gt;
&lt;pre&gt;&lt;code class="line-numbers"&gt;Template.Project/
    |
    |- Tasks/
    |    |
    |    |- Tasks.csproj
    |
    |- Tests/
    |    |
    |    |- Tester.cs
    |    |- Tests.csproj
    |
    |- Template.Project.sln
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このプロジェクトをベースとして、&lt;code&gt;Project/&lt;/code&gt;下に&lt;code&gt;.template.config/&lt;/code&gt;ディレクトリを作成し、その下に&lt;code&gt;template.json&lt;/code&gt;を作成します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="line-numbers"&gt;Template.Project/
    |
    |- .template.config
    |    |
    |    |- template.json
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;template.json&lt;/code&gt;では、次のメンバを記述します。&lt;/p&gt;
&lt;div class="table-responsive"&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center;"&gt;メンバ&lt;/th&gt;
&lt;th style="text-align: left;"&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;code&gt;$schema&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;template.json&lt;/code&gt;のスキーマ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;code&gt;author&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;テンプレートの作成者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;code&gt;classfication&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;テンプレートの種類&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;code&gt;tags&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;テンプレートのタグ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;code&gt;identity&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;テンプレートの識別子&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;テンプレートの名前&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;code&gt;shortName&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;dotnet new&lt;/code&gt; で指定する際の名前 (例: &lt;code&gt;dotnet new cpproj&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;code&gt;sourceName&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;テンプレート使用時に置き換える文字列  (&lt;code&gt;dotnet new&lt;/code&gt;コマンドに、&lt;code&gt;-n|--name&lt;/code&gt;オプションで名前を指定することで、指定された文字列を全てその名前に置換することができます)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;code&gt;preferNameDirectory&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;出力先ディレクトリがない場合テンプレートのディレクトリを作成するか (既定値: false)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;例えば、上記のプロジェクトでは次のような&lt;code&gt;json&lt;/code&gt;を記述します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json line-numbers"&gt;{
    &amp;quot;$schema&amp;quot;: &amp;quot;http://json.schemastore.org/template&amp;quot;,
    &amp;quot;author&amp;quot;: &amp;quot;AconCavy&amp;quot;,
    &amp;quot;classifications&amp;quot;: [
        &amp;quot;C#&amp;quot;,
        &amp;quot;Console&amp;quot;
    ],
    &amp;quot;tags&amp;quot;: {
        &amp;quot;language&amp;quot;: &amp;quot;C#&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;project&amp;quot;
    },
    &amp;quot;name&amp;quot;: &amp;quot;Template Project&amp;quot;,
    &amp;quot;identity&amp;quot;: &amp;quot;AconCavy.Template.Project&amp;quot;,
    &amp;quot;shortName&amp;quot;: &amp;quot;cpproj&amp;quot;,
    &amp;quot;sourceName&amp;quot;: &amp;quot;Template.Project&amp;quot;,
    &amp;quot;preferNameDirectory&amp;quot;: true
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;sourceName&lt;/code&gt;に設定した文字列は、テンプレート以下のすべての対象の文字列が置換されるため、&lt;code&gt;dotnet new cpproj -n Sample&lt;/code&gt;を実行した場合、&lt;code&gt;Template.Project/&lt;/code&gt;ディレクトリ、&lt;code&gt;Template.Project.sln&lt;/code&gt;が&lt;code&gt;Sample/&lt;/code&gt;ディレクトリ、&lt;code&gt;Sample.sln&lt;/code&gt;に置換されて生成されます。ファイル内の文字列も置換されるため注意が必要です。&lt;/p&gt;
&lt;p&gt;この状態で、&lt;code&gt;dotnet new -i path-to-template&lt;/code&gt;コマンドでインストールし、&lt;code&gt;dotnet new cpproj -n Sample&lt;/code&gt;を実行することで、上記のプロジェクトテンプレートをもとに以下のようなプロジェクトが生成されます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="line-numbers"&gt;Sample/
    |
    |- Tasks/
    |    |
    |    |- Tasks.csproj
    |
    |- Tests/
    |    |
    |    |- Tester.cs
    |    |- Tests.csproj
    |
    |- Sample.sln
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="section-3"&gt;コマンドの追加オプション&lt;/h3&gt;
&lt;p&gt;また、&lt;code&gt;Task.csproj&lt;/code&gt;と&lt;code&gt;Tests.csproj&lt;/code&gt;のターゲットフレームワークをテンプレート生成時に指定できるようにするため、&lt;code&gt;dotnet new cpproj&lt;/code&gt;コマンドにオプションを追加します。&lt;/p&gt;
&lt;p&gt;まず、&lt;code&gt;.template.config&lt;/code&gt;下に&lt;code&gt;dotnetcli.host.json&lt;/code&gt;を追加します。
&lt;code&gt;symbolInfo&lt;/code&gt;メンバに、&lt;code&gt;longName&lt;/code&gt;のオプションに&lt;code&gt;framework&lt;/code&gt;を、&lt;code&gt;shortName&lt;/code&gt;に&lt;code&gt;f&lt;/code&gt;をもった&lt;code&gt;Framework&lt;/code&gt;というメンバを追加します。
追加することで、&lt;code&gt;dotnet new cpproj&lt;/code&gt;にオプションとして、&lt;code&gt;-f|--framework&lt;/code&gt;のオプションを付与することができるようになります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json line-numbers"&gt;{
    &amp;quot;$schema&amp;quot;: &amp;quot;http://json.schemastore.org/dotnetcli.host&amp;quot;,
    &amp;quot;symbolInfo&amp;quot;: {
        &amp;quot;Framework&amp;quot;: {
            &amp;quot;longName&amp;quot;: &amp;quot;framework&amp;quot;,
            &amp;quot;shortName&amp;quot;: &amp;quot;f&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;次に&lt;code&gt;template.json&lt;/code&gt;に&lt;code&gt;symbols&lt;/code&gt;というメンバを追加し、ここに先ほど定義した&lt;code&gt;Framework&lt;/code&gt;メンバを追加します。
ここではオプションの振る舞いを定義します。&lt;/p&gt;
&lt;p&gt;今回はターゲットフレームワークを&lt;code&gt;.NET 5&lt;/code&gt;と&lt;code&gt;.NET Core 3.1&lt;/code&gt;を選択肢として定義します。
&lt;code&gt;datatype&lt;/code&gt;を&lt;code&gt;choice&lt;/code&gt;にして、&lt;code&gt;choices&lt;/code&gt;に選択肢を定義します。
&lt;code&gt;csproj&lt;/code&gt;の&lt;code&gt;TargetFramework&lt;/code&gt;に指定する文字列として、&lt;code&gt;.NET 5&lt;/code&gt;の場合は&lt;code&gt;net5.0&lt;/code&gt;、&lt;code&gt;.NET Core 3.1&lt;/code&gt;の場合は&lt;code&gt;netcoreapp3.1&lt;/code&gt;を&lt;code&gt;choice&lt;/code&gt;に設定します。
&lt;code&gt;replaces&lt;/code&gt;に置換する文字列を、&lt;code&gt;defaultValue&lt;/code&gt;にオプションを指定しない場合の文字列を設定します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json line-numbers"&gt;{
    ...
    &amp;quot;symbols&amp;quot;: {
        &amp;quot;Framework&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;parameter&amp;quot;,
            &amp;quot;description&amp;quot;: &amp;quot;The target framework for the project.&amp;quot;,
            &amp;quot;datatype&amp;quot;: &amp;quot;choice&amp;quot;,
            &amp;quot;choices&amp;quot;: [
                {
                    &amp;quot;choice&amp;quot;: &amp;quot;net5.0&amp;quot;,
                    &amp;quot;description&amp;quot;: &amp;quot;Target net5.0&amp;quot;
                },
                {
                    &amp;quot;choice&amp;quot;: &amp;quot;netcoreapp3.1&amp;quot;,
                    &amp;quot;description&amp;quot;: &amp;quot;Target netcoreapp3.1&amp;quot;
                }
            ],
            &amp;quot;replaces&amp;quot;: &amp;quot;netcoreapp3.1&amp;quot;,
            &amp;quot;defaultValue&amp;quot;: &amp;quot;netcoreapp3.1&amp;quot;
        }
    },
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そして、&lt;code&gt;Tasks.csproj&lt;/code&gt;と&lt;code&gt;Tests.csproj&lt;/code&gt;の&lt;code&gt;TargetFramework&lt;/code&gt;に&lt;code&gt;replaces&lt;/code&gt;で設定した文字列を設定します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml line-numbers"&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;

  &amp;lt;PropertyGroup&amp;gt;
    ...
    &amp;lt;TargetFramework&amp;gt;netcoreapp3.1&amp;lt;/TargetFramework&amp;gt;
    ...
  &amp;lt;/PropertyGroup&amp;gt;
  ...

&amp;lt;/Project&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この状態で、&lt;code&gt;dotnet new cpproj -n Sample -f net5.0&lt;/code&gt;を実行することで、&lt;code&gt;TargetFramework&lt;/code&gt;に&lt;code&gt;net5.0&lt;/code&gt;が設定されたプロジェクトを生成することができます。&lt;/p&gt;
&lt;h2 id="section-4"&gt;解答用のクラスとテスト用のクラスのテンプレート&lt;/h2&gt;
&lt;p&gt;単一のファイルのみ生成するように、テンプレートを構築します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="line-numbers"&gt;Template.Solver/
    |
    |- .template.config/
    |    |
    |    |- template.json
    |
    |- Template.Solver.cs

Template.Tests/
    |
    |- .template.config/
    |    |
    |    |- template.json
    |
    |- Template.TestsTests.cs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;プロジェクトのテンプレートの作り方と同様に、&lt;code&gt;template.json&lt;/code&gt;を記述しますが、単一ファイルのみ生成させるため、&lt;code&gt;preferNameDirectory&lt;/code&gt;を削除、または&lt;code&gt;false&lt;/code&gt;にします。&lt;/p&gt;
&lt;p&gt;解答用の&lt;code&gt;sourceName&lt;/code&gt;を&lt;code&gt;Template.Solver&lt;/code&gt;に、テスト用の&lt;code&gt;sourceName&lt;/code&gt;を&lt;code&gt;Template.Tests&lt;/code&gt;にすることで、&lt;code&gt;dotnet new&lt;/code&gt;コマンドの&lt;code&gt;-n|--name&lt;/code&gt;オプションに&lt;code&gt;Sample&lt;/code&gt;を指定すると、それぞれ&lt;code&gt;Sample.cs&lt;/code&gt;と&lt;code&gt;SampleTests.cs&lt;/code&gt;が生成されます。&lt;/p&gt;
&lt;h2 id="section-5"&gt;プロジェクトのパッケージ化&lt;/h2&gt;
&lt;p&gt;テンプレートが3つ用意できましたが、テンプレートをインストールする際にはそれぞれ個別にインストールが必要となります。
そのため、3つのテンプレートまとめて、1つの&lt;code&gt;nuget&lt;/code&gt;パッケージを生成します。
3つのディレクトリを一つのディレクトリにまとめ、そのディレクトリと同じ階層に&lt;code&gt;csproj&lt;/code&gt;ファイルを生成します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="line-numbers"&gt;CPTemplate/
    |
    |- content/
    |    |
    |    |- Template.Project/
    |    |- Template.Solver/
    |    |- Template.Tests/
    |
    |- CPTemplate.csproj
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ディレクトリを整理したら、&lt;code&gt;CPTemplate.csproj&lt;/code&gt;を編集し、ビルド情報を定義します。&lt;/p&gt;
&lt;div class="table-responsive"&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center;"&gt;メンバ&lt;/th&gt;
&lt;th style="text-align: left;"&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;code&gt;PackageType&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;nuget&lt;/code&gt;パッケージタイプ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;code&gt;PackageVersion&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;パッケージのバージョン&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;code&gt;PackageId&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;パッケージの識別子&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;code&gt;Title&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;パッケージの名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;code&gt;Authors&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;パッケージの作成者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;code&gt;Description&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;パッケージの説明&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;code&gt;PackageTags&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;パッケージのタグ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;code&gt;TargetFramework&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;パッケージをビルドするためのターゲットフレームワーク&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;code&gt;PackageProjectUrl&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;プロジェクトURL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;code&gt;IncludeBuildOutput&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;ビルド時に生成されるファイルをパッケージに含めるか&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;code&gt;ContentTargetFolders&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;パッケージ化するプロジェクトのルートが&lt;code&gt;content&lt;/code&gt;か&lt;code&gt;contentFiles&lt;/code&gt;以外の場合は設定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;code&gt;Content&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;パッケージに含めるファイルや除くファイルを設定する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class="language-xml line-numbers"&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;

  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;PackageType&amp;gt;Template&amp;lt;/PackageType&amp;gt;
    &amp;lt;PackageVersion&amp;gt;1.0&amp;lt;/PackageVersion&amp;gt;
    &amp;lt;PackageId&amp;gt;AconCavy.Templates&amp;lt;/PackageId&amp;gt;
    &amp;lt;Title&amp;gt;Templates&amp;lt;/Title&amp;gt;
    &amp;lt;Authors&amp;gt;AconCavy&amp;lt;/Authors&amp;gt;
    &amp;lt;Description&amp;gt;sample template.&amp;lt;/Description&amp;gt;
    &amp;lt;PackageTags&amp;gt;dotnet-new;templates;competitive-programming&amp;lt;/PackageTags&amp;gt;
    &amp;lt;TargetFramework&amp;gt;netcoreapp3.1&amp;lt;/TargetFramework&amp;gt;
    &amp;lt;PackageProjectUrl&amp;gt;https://github.com/AconCavy/CompetitiveProgrammingTemplateCSharp&amp;lt;/PackageProjectUrl&amp;gt;

    &amp;lt;IncludeBuildOutput&amp;gt;false&amp;lt;/IncludeBuildOutput&amp;gt;
    &amp;lt;ContentTargetFolders&amp;gt;content&amp;lt;/ContentTargetFolders&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;

  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;Content Include=&amp;quot;content/**/*&amp;quot; Exclude=&amp;quot;content/**/bin/**;content/**/obj/**&amp;quot; /&amp;gt;
    &amp;lt;Compile Remove=&amp;quot;**/*&amp;quot; /&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;

&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;また、それぞれのテンプレートの&lt;code&gt;template.json&lt;/code&gt;に&lt;code&gt;groupIdentity&lt;/code&gt;を追加します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json line-numbers"&gt;// Project
&amp;quot;groupIdentity&amp;quot;: &amp;quot;AconCavy.Templates.Project&amp;quot;

// Solver
&amp;quot;groupIdentity&amp;quot;: &amp;quot;AconCavy.Templates.Solver&amp;quot;

// Tests
&amp;quot;groupIdentity&amp;quot;: &amp;quot;AconCavy.Templates.Tests&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;dotnet pack&lt;/code&gt;コマンドを実行することで&lt;code&gt;nuget&lt;/code&gt;パッケージを生成することができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sh line-numbers"&gt;dotnet pack
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実行後、&lt;code&gt;bin/Debug/&lt;/code&gt;下に&lt;code&gt;{PackageId}.{PackageVersion}.nupkg&lt;/code&gt;が生成されます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="line-numbers"&gt;CPTemplate/
    |
    |- bin/
    |    |
    |    |- Debug/
    |    |    |
    |    |    |- AconCavy.Templates.1.0.0.nupkg
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この&lt;code&gt;nupkg&lt;/code&gt;を&lt;code&gt;dotnet new&lt;/code&gt;コマンドでインストールすることで、3つのテンプレートを1回でインストールすることができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sh line-numbers"&gt;dotnet new -i ./bin/Debug/AconCavy.Templates.1.0.0.nupkg
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="section-6"&gt;まとめ&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;dotnet new&lt;/code&gt;のカスタムテンプレートの作り方と、テンプレートのパッケージ化の手順をまとめました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;テンプレートのルートに&lt;code&gt;.template.config&lt;/code&gt;ディレクトリを作成し、内に&lt;code&gt;template.json&lt;/code&gt;を作成する。&lt;/li&gt;
&lt;li&gt;テンプレートが複数ある場合は1つのディレクトリにまとめ、&lt;code&gt;dotnet pack&lt;/code&gt;コマンドでパッケージ化する。&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>&lt;p&gt;&lt;a href="https://github.com/AconCavy/CompetitiveProgrammingTemplateCSharp"&gt;競プロ用のプロジェクトテンプレート&lt;/a&gt;を整備したので、&lt;code&gt;dotnet new&lt;/code&gt;のカスタムテンプレート作成の備忘録です。&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://aconcavy.github.io/blog/posts/20201119statiqextension</id>
		<title>Statiqがmarkdownから生成するhtmlのカスタマイズ</title>
		<link href="https://aconcavy.github.io/blog/posts/20201119statiqextension" />
		<updated>2020-11-19T00:00:00Z</updated>
		<content>&lt;h1 id="section"&gt;はじめに&lt;/h1&gt;
&lt;p&gt;Statiqがmarkdownから生成するhtmlの任意のタグにクラスを追加する方法の備忘録&lt;/p&gt;
&lt;h1 id="section-1"&gt;方法&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Bootstrapper&lt;/code&gt;において、&lt;code&gt;Statiq.Web&lt;/code&gt;でWebサイトを生成するメソッドである&lt;code&gt;CreateWeb()&lt;/code&gt;では、markdownに関わるModuleの&lt;code&gt;RenderMarkdown&lt;/code&gt;を&lt;code&gt;Templates&lt;/code&gt;内で設定している。
そのため、&lt;code&gt;ConfigureTemplates()&lt;/code&gt;を通じて、予め設定されたModuleを上書きすることで好みの設定を反映することができる。
Statiqでは、markdownを生成するために&lt;a href="https://github.com/lunet-io/markdig"&gt;markdig&lt;/a&gt;を使っているようなので、markdownの設定を追加するには&lt;code&gt;IMarkdownExtension&lt;/code&gt;を継承したクラスを&lt;code&gt;Rendermarkdown.UseExtension&amp;lt;TExtension&amp;gt;()&lt;/code&gt;に渡す必要がある。&lt;/p&gt;
&lt;p&gt;今回は、&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;タグをレスポンシブ対応と、&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;タグにクラスを追加するために、markdigの&lt;code&gt;BootstrapExtension&lt;/code&gt;を設定に追加する。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static async Task&amp;lt;int&amp;gt; Main(string[] args) =&amp;gt;
    await Bootstrapper.Factory
        .CreateWeb(args)
        .ConfigureTemplates(templates =&amp;gt;
        {
            // 新しい設定のModuleを作成
            // デフォルトはUseExtensionsのみ
            var markdownModule = new RenderMarkdown()
                .UseExtensions()
                .UseExtension&amp;lt;BootstrapExtension&amp;gt;() // bootstrap
                .UseExtension&amp;lt;PrismJsExtension&amp;gt;(); // オリジナル
            if (templates.ContainsKey(MediaTypes.Markdown)) 
                templates[MediaTypes.Markdown].Module = markdownModule; // 既にあるならば書き換え
            else 
                templates.Add(MediaTypes.Markdown,
                    new Template(ContentType.Content, Phase.Process, markdownModule)); // 無ければ追加
        })
        .RunAsync();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;また、&lt;code&gt;prism.js&lt;/code&gt;のコードブロックに行数を表示するクラスの&lt;code&gt;line-number&lt;/code&gt;を追加するために、新しく&lt;code&gt;PrismJsExtension.cs&lt;/code&gt;を作成し、&lt;code&gt;BootstrapExtension&lt;/code&gt;に倣い、&lt;code&gt;MarkdownObject&lt;/code&gt;が&lt;code&gt;CodeBlock&lt;/code&gt;であれば&lt;code&gt;line-numbers&lt;/code&gt;をクラスに追加するメソッドの&lt;code&gt;PipelineOnDocumentProcessed()&lt;/code&gt;markdigの生成パイプラインにデリゲートを追加する。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;// PrismJsExtension.cs
using Markdig;
using Markdig.Renderers;
using Markdig.Renderers.Html;
using Markdig.Syntax;

namespace Blog.Extensions
{
    public class PrismJsExtension : IMarkdownExtension
    {
        public void Setup(MarkdownPipelineBuilder pipeline)
        {
            pipeline.DocumentProcessed -= PipelineOnDocumentProcessed;
            pipeline.DocumentProcessed += PipelineOnDocumentProcessed;
        }

        public void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer)
        {
        }

        private static void PipelineOnDocumentProcessed(MarkdownDocument document)
        {
            foreach (var node in document.Descendants())
            {
                if (node is CodeBlock)
                {
                    node.GetAttributes().AddClass(&amp;quot;line-numbers&amp;quot;); // 行数表示のクラスを追加
                }
            }
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上の2つの設定を追加してビルドすることで、bootstrapによる&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;タグのレスポンシブ対応、&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;タグのレイアウト、prism.jsの言語を指定したコードブロックに行数が表示されるようになる。&lt;/p&gt;
&lt;h1 id="section-2"&gt;まとめ&lt;/h1&gt;
&lt;p&gt;StatiqのBootstrapperにて&lt;code&gt;ConfigureTemplates()&lt;/code&gt;からテンプレートのmarkdownに関わるModuleを書き換えることで、markdownからhtmlを生成する設定を変更することができ、&lt;code&gt;RenderMarkdown.UseExtension&amp;lt;TExtension&amp;gt;()&lt;/code&gt;に&lt;code&gt;IMarkdownExtension&lt;/code&gt;を継承したクラスを設定することで、htmlタグのクラス等を変更することができる。&lt;/p&gt;
</content>
		<summary>&lt;p&gt;Statiqがmarkdownから生成するhtmlの任意のタグにクラスを追加する方法の備忘録&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://aconcavy.github.io/blog/posts/20201119forbenchmark</id>
		<title>.NET Core 3.1と.NET 5のfor-loopの速度比較</title>
		<link href="https://aconcavy.github.io/blog/posts/20201119forbenchmark" />
		<updated>2020-11-19T00:00:00Z</updated>
		<content>&lt;h1 id="section"&gt;はじめに&lt;/h1&gt;
&lt;p&gt;.NET 5でいろいろなパフォーマンスが向上したらしいので、1次元配列、2次元配列、2次元ジャグ配列、3次元配列、3次元配列のfor-loopのベンチマークを取ってみた。&lt;/p&gt;
&lt;h1 id="section-1"&gt;環境&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;OS: Windows 10&lt;/li&gt;
&lt;li&gt;CPU: AMD Ryzen 5 3600&lt;/li&gt;
&lt;li&gt;SDK: .NET 5.0&lt;/li&gt;
&lt;li&gt;BenchmarkDotnet: 0.12.1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-2"&gt;計測対象&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Runtimes
&lt;ul&gt;
&lt;li&gt;.NET Core 3.1.9&lt;/li&gt;
&lt;li&gt;.NET 5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Targets
&lt;ul&gt;
&lt;li&gt;1次元配列 (1e6)&lt;/li&gt;
&lt;li&gt;2次元配列 (1e3 * 1e3)&lt;/li&gt;
&lt;li&gt;2次元ジャグ配列 (1e3 * 1e3)&lt;/li&gt;
&lt;li&gt;3次元配列 (1e2 * 1e2 * 1e2)&lt;/li&gt;
&lt;li&gt;3次元ジャグ配列 (1e2 * 1e2 * 1e2)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;操作&lt;/h2&gt;
&lt;p&gt;全ての要素に値を代入&lt;/p&gt;
&lt;h2 id="section-4"&gt;スクリプト&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Jobs;

namespace BenchmarkSharp
{
    [SimpleJob(RuntimeMoniker.NetCoreApp31, baseline: true)]
    [SimpleJob(RuntimeMoniker.NetCoreApp50)]
    [MemoryDiagnoser]
    public class ForLoopBenchmark
    {
        private const int Size1 = (int) 1e6;
        private const int Size2 = (int) 1e3;
        private const int Size3 = (int) 1e2;
        private int[] _dim1;
        private int[,] _dim2;
        private int[][] _dim2Jagged;
        private int[,,] _dim3;
        private int[][][] _dim3Jagged;

        [GlobalSetup]
        public void Setup()
        {
            _dim1 = new int[Size1];
            _dim2 = new int[Size2, Size2];
            _dim3 = new int[Size3, Size3, Size3];
            _dim2Jagged = new int[Size2][];
            for (var i = 0; i &amp;lt; _dim2Jagged.Length; i++) _dim2Jagged[i] = new int[Size2];
            _dim3Jagged = new int[Size3][][];
            for (var i = 0; i &amp;lt; _dim3Jagged.Length; i++)
            {
                _dim3Jagged[i] = new int[Size3][];
                for (var j = 0; j &amp;lt; _dim3Jagged[i].Length; j++)
                {
                    _dim3Jagged[i][j] = new int[Size2];
                }
            }
        }

        [Benchmark]
        public void Dim1()
        {
            for (var i = 0; i &amp;lt; _dim1.Length; i++) _dim1[i] = i;
        }

        [Benchmark]
        public void Dim2()
        {
            for (var i = 0; i &amp;lt; _dim2.GetLength(0); i++)
            for (var j = 0; j &amp;lt; _dim2.GetLength(1); j++)
                _dim2[i, j] = j;
        }

        [Benchmark]
        public void Dim2Jagged()
        {
            for (var i = 0; i &amp;lt; _dim2Jagged.Length; i++)
            for (var j = 0; j &amp;lt; _dim2Jagged[i].Length; j++)
                _dim2Jagged[i][j] = j;
        }

        [Benchmark]
        public void Dim3()
        {
            for (var i = 0; i &amp;lt; _dim3.GetLength(0); i++)
            for (var j = 0; j &amp;lt; _dim3.GetLength(1); j++)
            for (var k = 0; k &amp;lt; _dim3.GetLength(2); k++)
                _dim3[i, j, k] = k;
        }

        [Benchmark]
        public void Dim3Jagged()
        {
            for (var i = 0; i &amp;lt; _dim3Jagged.Length; i++)
            for (var j = 0; j &amp;lt; _dim3Jagged[i].Length; j++)
            for (var k = 0; k &amp;lt; _dim3Jagged[i][j].Length; k++)
                _dim3Jagged[i][j][k] = k;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="section-5"&gt;結果&lt;/h1&gt;
&lt;div class="table-responsive"&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Job&lt;/th&gt;
&lt;th&gt;Runtime&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Mean&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Error&lt;/th&gt;
&lt;th style="text-align: right;"&gt;StdDev&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Median&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Ratio&lt;/th&gt;
&lt;th style="text-align: right;"&gt;RatioSD&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Gen 0&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Gen 1&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Gen 2&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Allocated&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Dim1&lt;/td&gt;
&lt;td&gt;.NET Core 3.1&lt;/td&gt;
&lt;td&gt;.NET Core 3.1&lt;/td&gt;
&lt;td style="text-align: right;"&gt;565.1 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;3.35 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;3.14 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;566.0 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.00&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.00&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1 B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dim1&lt;/td&gt;
&lt;td&gt;.NET Core 5.0&lt;/td&gt;
&lt;td&gt;.NET Core 5.0&lt;/td&gt;
&lt;td style="text-align: right;"&gt;525.8 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;10.49 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;24.53 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;508.9 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.92&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.03&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dim2&lt;/td&gt;
&lt;td&gt;.NET Core 3.1&lt;/td&gt;
&lt;td&gt;.NET Core 3.1&lt;/td&gt;
&lt;td style="text-align: right;"&gt;5,366.7 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;47.74 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;44.65 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;5,357.6 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.00&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.00&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;111 B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dim2&lt;/td&gt;
&lt;td&gt;.NET Core 5.0&lt;/td&gt;
&lt;td&gt;.NET Core 5.0&lt;/td&gt;
&lt;td style="text-align: right;"&gt;3,544.6 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;230.75 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;680.38 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;3,060.7 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.64&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.13&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dim2Jagged&lt;/td&gt;
&lt;td&gt;.NET Core 3.1&lt;/td&gt;
&lt;td&gt;.NET Core 3.1&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1,514.8 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;29.53 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;35.16 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1,522.0 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.00&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.00&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dim2Jagged&lt;/td&gt;
&lt;td&gt;.NET Core 5.0&lt;/td&gt;
&lt;td&gt;.NET Core 5.0&lt;/td&gt;
&lt;td style="text-align: right;"&gt;2,003.3 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;8.14 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;7.22 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;2,001.9 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.33&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.03&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dim3&lt;/td&gt;
&lt;td&gt;.NET Core 3.1&lt;/td&gt;
&lt;td&gt;.NET Core 3.1&lt;/td&gt;
&lt;td style="text-align: right;"&gt;5,209.7 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;45.24 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;40.10 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;5,201.5 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.00&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.00&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;10 B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dim3&lt;/td&gt;
&lt;td&gt;.NET Core 5.0&lt;/td&gt;
&lt;td&gt;.NET Core 5.0&lt;/td&gt;
&lt;td style="text-align: right;"&gt;4,525.7 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;246.02 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;725.38 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;4,114.5 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.90&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.15&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;td style="text-align: right;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dim3Jagged&lt;/td&gt;
&lt;td&gt;.NET Core 3.1&lt;/td&gt;
&lt;td&gt;.NET Core 3.1&lt;/td&gt;
&lt;td style="text-align: right;"&gt;18,504.2 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;466.86 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1,376.55 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;18,885.7 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1.00&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.00&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dim3Jagged&lt;/td&gt;
&lt;td&gt;.NET Core 5.0&lt;/td&gt;
&lt;td&gt;.NET Core 5.0&lt;/td&gt;
&lt;td style="text-align: right;"&gt;17,920.7 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1,043.53 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;3,076.86 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;19,831.3 μs&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.98&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0.20&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;td style="text-align: right;"&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h1 id="section-6"&gt;まとめ&lt;/h1&gt;
&lt;p&gt;.NET 5.0は .NET Core 3.1に比べて&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1次元配列 -&amp;gt; 10%程度高速&lt;/li&gt;
&lt;li&gt;2次元配列 -&amp;gt; 35%程度高速&lt;/li&gt;
&lt;li&gt;2次元ジャグ配列 -&amp;gt; 35%程度低速&lt;/li&gt;
&lt;li&gt;3次元配列 -&amp;gt; 10%程度高速&lt;/li&gt;
&lt;li&gt;3次元ジャグ配列 -&amp;gt; ほぼ一緒&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;.NET 5.0において多次元配列と多次元ジャグ配列の各次元のサイズが同じ大きさであれば&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2次元 -&amp;gt; ジャグ配列のほうが40%程度高速&lt;/li&gt;
&lt;li&gt;3次元 -&amp;gt; 配列のほうが75%程度高速&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>&lt;p&gt;.NET 5でいろいろなパフォーマンスが向上したらしいので、1次元配列、2次元配列、2次元ジャグ配列、3次元配列、3次元配列のfor-loopのベンチマークを取ってみた。&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://aconcavy.github.io/blog/posts/20201108statiqblog</id>
		<title>ブログのレイアウト変更とStatiqを使った静的サイトの生成</title>
		<link href="https://aconcavy.github.io/blog/posts/20201108statiqblog" />
		<updated>2020-11-08T00:00:00Z</updated>
		<content>&lt;h1 id="section"&gt;はじめに&lt;/h1&gt;
&lt;p&gt;前回のブログから一度も更新せずに3か月経ち、サイト生成を &lt;code&gt;Wyam&lt;/code&gt; から &lt;code&gt;Statiq&lt;/code&gt; に変えたついでに、サイトのレイアウトを頑張ってアレンジしたので記事を書きます。&lt;/p&gt;
&lt;h1 id="statiq"&gt;Statiq&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://statiq.dev/"&gt;Statiq&lt;/a&gt; は &lt;a href="https://aconcavy.github.io/blog/20200819wyamblog"&gt;前回の記事&lt;/a&gt; で紹介した &lt;code&gt;Wyam&lt;/code&gt; をリブランディングし、機能の追加に柔軟性を持たせたフレームワークだそうです。
大きく3つのフレームワークに分かれており、基礎となる &lt;code&gt;Statiq.Framework&lt;/code&gt;、一般的なWebサイト生成のための &lt;code&gt;Statiq.Web&lt;/code&gt;、ドキュメントサイト生成のための &lt;code&gt;Statiq.Doc&lt;/code&gt; に分かれています。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Statiq.Framework&lt;/code&gt; はMITライセンスで公開されている一方、&lt;code&gt;Statiq.Web&lt;/code&gt; と &lt;code&gt;Statiq.Doc&lt;/code&gt; は &lt;a href="https://licensezero.com/licenses/prosperity"&gt;License Zero Prosperity Public License&lt;/a&gt; (Public License) と &lt;a href="https://licensezero.com/licenses/private"&gt;License Zero Private License&lt;/a&gt; (Private License)` のデュアルライセンスを取ります。
そのため、商用利用の場合は、はじめ30日間の無料体験期間のあと、開発者一人当たり50ドルのPrivate Licenseを取得する必要があります。
非商用の場合は他のPermissive Open-source License(MITやApache等)と同様のライセンスで利用することができます。
詳しくは&lt;a href="https://github.com/statiqdev/Statiq.Web/blob/main/LICENSE-FAQ.md"&gt;こちら&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="section-1"&gt;使い方&lt;/h2&gt;
&lt;p&gt;Wyamは.NET上にツールをインストールして実行するのに対して、Statiqの場合はコンソールアプリケーションとして実行します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sh line-numbers"&gt;dotnet new console --name Blog
dotnet add package Statiq.Web --version x.y.z
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そして、エントリポイントの &lt;code&gt;Program.cs&lt;/code&gt; にBootStrapeprを追記します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;using System.Threading.Tasks;
using Statiq.App;
using Statiq.Web;

namespace Blog
{
    public static class Program
    {
        public static async Task&amp;lt;int&amp;gt; Main(string[] args) =&amp;gt;
            await Bootstrapper.Factory
                .CreateWeb(args)
                .RunAsync();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;次に、&lt;code&gt;./input/&lt;/code&gt; ディレクトリ内に &lt;code&gt;index.md&lt;/code&gt; を作成し、適当な内容を書いて保存します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="line-numbers"&gt;Title: Hello Statiq
---
Hello world!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wyamと同様に、ファイル上部にFront Matterを記述することで、記事タイトルやタグといったメタ情報を付与することができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sh line-numbers"&gt;dotnet run -- preview
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そして、プロジェクトを実行することでローカルホスト上で静的サイトがホスティングされます。(デフォルトでは &lt;code&gt;localhost:5080&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;素の状態では、テーマは存在しないので、&lt;code&gt;./theme/input/&lt;/code&gt; にWebサイトのテーマを用意する必要があります。&lt;/p&gt;
&lt;p&gt;サンプルとして、公式テーマの&lt;a href="https://github.com/statiqdev/CleanBlog"&gt;CleanBlog&lt;/a&gt;を &lt;code&gt;./theme/&lt;/code&gt; ディレクトリ内に配置してプロジェクトを実行することで、WyamのCleanBlogテーマと同様のWebサイトを生成することができます。&lt;/p&gt;
&lt;h2 id="github-pages"&gt;Github Pagesへの展開&lt;/h2&gt;
&lt;p&gt;Statiq.Webでは、公式でGithub Pagesへのデプロイ方法が用意されています。&lt;/p&gt;
&lt;p&gt;Wyamの時と同様に、設定ファイル(今回は &lt;code&gt;settings.yml&lt;/code&gt;)に設定を追記する必要があります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="line-numbers"&gt;Host: aconcavy.github.io // github pagesのホスト
LinkRoot: /Blog // バーチャルパス
LinksUseHttps: true

GitHubOwner: AconCavy // ユーザ名
GitHubName: Blog // リポジトリ名
GitHubToken: =&amp;gt; Config.FromSetting&amp;lt;string&amp;gt;("GITHUB_TOKEN") // これはこのまま
GitHubBranch: gh-pages // 生成先ブランチ
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Github Actionでは次のようなワークフローを指定します。
この時に、&lt;code&gt;GitHubBranch&lt;/code&gt;で指定したブランチは、存在しない場合はエラーが吐かれるので、先にブランチを作成しておきましょう(5敗)。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml line-numbers"&gt;name: deploy

on:
  push:
    branches:
      - main

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1
    - name: Deploy
      run: dotnet run -p Blog -- deploy
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ワークフローが成功すると、指定したブランチにファイルが生成されるので、リポジトリの設定からGithub Pagesのブランチを指定します。
すべて成功すると、&lt;code&gt;{user}.github.io/{repository}&lt;/code&gt; (今回は&lt;a href="https://aconcavy.github.io/Blog/"&gt;aconcavy.github.io/Blog&lt;/a&gt;`)にサイトが表示されます。&lt;/p&gt;
&lt;p&gt;サイトのテーマがうまく適用されない場合は、設定ファイルの &lt;code&gt;Host&lt;/code&gt; や &lt;code&gt;LinkRoot&lt;/code&gt; を見直すといいでしょう。&lt;/p&gt;
&lt;h1 id="section-2"&gt;まとめ&lt;/h1&gt;
&lt;p&gt;Statiqで作成した静的Webサイトを、GitHub ActionsとGitHub Pagesデプロイする方法をまとめました。&lt;/p&gt;
&lt;p&gt;Wyamと比べてカスタマイズの自由度が高いみたいだけど、ドキュメントを調べても調べたいことにいまいち辿り着かないので、ドキュメントが豊富になればもっと使いやすくなりそうです。APIリファレンスとかも欲しい。
まだプレビュー段階なので今後に期待しています。&lt;/p&gt;
&lt;h1 id="section-3"&gt;あとがき&lt;/h1&gt;
&lt;p&gt;Webフロントなんもわからんマンだったので、CleanBlogのテーマを基にコードのシンタックスを変更したりしていたら3,4日ぐらいかかりました。おかげでWebデザインを学ぶことができたので、ちょっと前進でしょうか。&lt;/p&gt;
&lt;p&gt;画像がレスポンシブ対応してないから前の記事をスマホでみると横に広くなってしまうので修正したいけど、Statiqでmarkdownから生成されるhtmlにタグを追加したいけどどうやるんだろうね。&lt;/p&gt;
</content>
		<summary>&lt;p&gt;前回のブログから一度も更新せずに3か月経ち、サイト生成を &lt;code&gt;Wyam&lt;/code&gt; から &lt;code&gt;Statiq&lt;/code&gt; に変えたついでに、サイトのレイアウトを頑張ってアレンジしたので記事を書きます。&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://aconcavy.github.io/blog/posts/20200819wyamblog</id>
		<title>Wyamを使った静的サイトの生成とGitHub Actionsを使ったGitHub Pagesへのデプロイ</title>
		<link href="https://aconcavy.github.io/blog/posts/20200819wyamblog" />
		<updated>2020-08-19T00:00:00Z</updated>
		<content>&lt;h1 id="is"&gt;これ is 何&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://wyam.io/"&gt;Wyam&lt;/a&gt; を使ってブログを作成し、Github Pages でホスティング、Github Actions でデプロイさせた手順をまとめたものです。&lt;/p&gt;
&lt;h1 id="section"&gt;実行環境&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Windows 10 1909&lt;/li&gt;
&lt;li&gt;Microsoft.NETCore.App 2.1.21&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="wyam"&gt;Wyam&lt;/h1&gt;
&lt;h2 id="wyam-is"&gt;Wyam is 何&lt;/h2&gt;
&lt;p&gt;.NET Core製の静的サイトジェネレータで、ブログやドキュメント等を markdown と Razor ファイルで作ることができます。&lt;/p&gt;
&lt;p&gt;見た目はテンプレートが6種類あり、カスタマイズ可能で、.NET Core および C# で機能の拡張をすることもできます。&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Easy! Flexible! Powerful!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="section-1"&gt;ダウンロードとインストール&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://dotnet.microsoft.com/"&gt;.NET SDK&lt;/a&gt; をインストールしていない場合はインストールします。2020年8月19日現在、最新の .NET Core Runtime は3.1ですが、 Wyam をインストールするために2.1の LTS もダウンロードおよびインストールします。&lt;/p&gt;
&lt;p&gt;.NET Core SDK,および Runtime がインストールされたら、.NET Core ツールを用いて Wyam をインストールします。&lt;/p&gt;
&lt;pre&gt;&lt;code class="line-numbers"&gt;dotnet tool -g Wyam.Tool
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="section-2"&gt;プロジェクトの作成&lt;/h2&gt;
&lt;p&gt;プロジェクトを作成したいディレクトリに移動し、ブログテンプレートを&lt;code&gt;--recipe&lt;/code&gt; または &lt;code&gt;-r&lt;/code&gt; オプションで生成します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="line-numbers"&gt;wyam new -r Blog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;テンプレートが生成されたら、次のコマンドでビルドします。&lt;/p&gt;
&lt;pre&gt;&lt;code class="line-numbers"&gt;wyam -r Blog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;また、ビルドの際には &lt;code&gt;--theme&lt;/code&gt; または &lt;code&gt;-t&lt;/code&gt; オプションでテーマを指定することができます。テーマについては&lt;a href="https://wyam.io/recipes/blog/themes/"&gt;こちら&lt;/a&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class="line-numbers"&gt;wyam -r Blog -t CleanBlog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ビルドが終わったら、ローカル環境で実行してみます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="line-numbers"&gt;wyam preview
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://aconcavy.github.io/blog/assets/images/hello_wyam.webp" class="img-fluid" alt="hello_wyam"&gt;&lt;/p&gt;
&lt;p&gt;あっという間にブログが出来上がりました👏&lt;/p&gt;
&lt;h2 id="section-3"&gt;記事の編集&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;./input/&lt;/code&gt; 内に &lt;code&gt;about.md&lt;/code&gt; が、また &lt;code&gt;./input/posts/&lt;/code&gt; 内に &lt;code&gt;first-post.md&lt;/code&gt; が生成されています。これらのように markdown ファイルを追加および編集することで、記事の編集および追加をすることができます。&lt;/p&gt;
&lt;h2 id="front-matter"&gt;Front Matter の設定&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;first-post.md&lt;/code&gt; ファイルの先頭に以下のようなものが書かれています。&lt;/p&gt;
&lt;pre&gt;&lt;code class="line-numbers"&gt;Title: First Post
Published: 1/1/2016
Tags: Introduction
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これらは &lt;code&gt;Front Matter&lt;/code&gt; といい、YAML や JSON フォーマットで使うことができる固有の変数です。これを使って記事にメタデータを付与することができます。Wyam では、&lt;a href="https://hexo.io/docs/front-matter.html"&gt;Hexo&lt;/a&gt; や &lt;a href="https://gohugo.io/content-management/front-matter/"&gt;Hugo&lt;/a&gt; のような別の静的サイトジェネレータと同じ変数を使うことができるそうです。&lt;/p&gt;
&lt;p&gt;Published の日付を未来にするとその日になるまで表示されないようなので注意。
日本時間の深夜に記事を作成して、ローカルでは表示されるのに GitHub Pages や他のデプロイ先では表示されない場合はここを疑いましょう (1敗)。&lt;/p&gt;
&lt;h1 id="section-4"&gt;ブログを公開する&lt;/h1&gt;
&lt;p&gt;Wyam で作成したプロジェクトを GitHub のリポジトリでバージョン管理を行い、Master ブランチが更新されたら GitHub Actions でプロジェクトをビルド、およびGitHub Pagesにホスティングを行います。&lt;/p&gt;
&lt;h2 id="github-pages-is"&gt;GitHub Pages is 何&lt;/h2&gt;
&lt;p&gt;GitHub のリポジトリから Web サイトを直接ホストすることができるサービスです。
詳しくは&lt;a href="https://docs.github.com/ja/github/working-with-github-pages/about-github-pages"&gt;こちら&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;リポジトリ名が &lt;code&gt;ユーザ名.github.io&lt;/code&gt; の場合はユーザのページに、それ以外の場合はプロジェクトのページとして扱うことができます。&lt;/p&gt;
&lt;h2 id="github-actions-is"&gt;Github Actions is 何&lt;/h2&gt;
&lt;p&gt;GitHub のリポジトリから、プロジェクトをビルド、テスト、デプロイすることができるサービスです。CI/CDです。
詳しくは&lt;a href="https://github.co.jp/features/actions"&gt;こちら&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;リポジトリが Public なら無料、Private なら従量課金らしいです。&lt;/p&gt;
&lt;h2 id="section-5"&gt;プロジェクトの設定を変更する&lt;/h2&gt;
&lt;p&gt;GitHubにリポジトリを作成し、Wyam で作成したプロジェクトを Commit / Push します。この際 &lt;code&gt;.gitignore&lt;/code&gt; には以下の設定を指定しておくといいでしょう。&lt;/p&gt;
&lt;pre&gt;&lt;code class="line-numbers"&gt;# Wyam files
output/
config.wyam.dll
config.wyam.hash
config.wyam.packages.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;次に、&lt;code&gt;config.wyam&lt;/code&gt; を編集してプロジェクトの設定を行います。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BlogKeys.Title&lt;/code&gt; でWeb サイトのタイトルを、&lt;code&gt;BlogKeys.Description&lt;/code&gt; でWeb サイトのトップに表示される簡単な説明を指定できます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="line-numbers"&gt;Settings[BlogKeys.Title] = "This is title";
Settings[BlogKeys.Description] = "Welcome!";
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Web サイトを &lt;code&gt;https&lt;/code&gt; に指定する場合は以下のオプションを有効にします。&lt;/p&gt;
&lt;pre&gt;&lt;code class="line-numbers"&gt;Settings[Keys.LinksUseHttps] = true;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Web サイトで表示するカルチャ情報を設定する場合は &lt;code&gt;Keys.DateTimeDisplayCulture&lt;/code&gt; と &lt;code&gt;Keys.DateTimeInputCulture&lt;/code&gt; を変更します。
&lt;code&gt;2020年8月19日&lt;/code&gt; のように表示したい場合は &lt;code&gt;Keys.DateTimeDisplayCulture&lt;/code&gt; に &lt;code&gt;ja-JP&lt;/code&gt; を指定します。
日本時間を表示したい場合も同様に &lt;code&gt;Keys.DateTimeInputCulture&lt;/code&gt; に &lt;code&gt;ja-JP&lt;/code&gt; を指定します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="line-numbers"&gt;Settings[Keys.DateTimeDisplayCulture] = "ja-JP";
Settings[Keys.DateTimeInputCulture] = "ja-JP";
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;プロジェクトのルーティングでは、GitHub のリポジトリがユーザページ用のリポジトリの場合 (&lt;code&gt;ユーザ名.github.io&lt;/code&gt;) と、それ以外のリポジトリ(プロジェクトリポジトリ)の場合で指定する設定が異なります。&lt;/p&gt;
&lt;h3 id="section-6"&gt;1 ユーザページの場合&lt;/h3&gt;
&lt;p&gt;例として、GitHubユーザ名が &lt;code&gt;AconCavy&lt;/code&gt; の場合は以下のようになります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="line-numbers"&gt;Settings[Keys.Host] = "aconcavy.github.io";
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="section-7"&gt;2 プロジェクトページの場合&lt;/h3&gt;
&lt;p&gt;プロジェクトページで作成する場合、&lt;code&gt;Keys.LinkRoot&lt;/code&gt; にリポジトリ名を設定する必要があります。例として、リポジトリ名が &lt;code&gt;Blog&lt;/code&gt; の場合は以下のようになります。&lt;strong&gt;大文字と小文字の区別があるようなので注意が必要です。&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="line-numbers"&gt;Settings[Keys.Host] = "aconcavy.github.io";
Settings[Keys.LinkRoot] = "Blog";
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この設定を変更した場合、&lt;code&gt;wyam preview&lt;/code&gt; を使ってローカルでプレビューをしようとしても、Path が &lt;code&gt;localhost:5080/&lt;/code&gt; のままで、正しくプレビューすることができません。そのため、&lt;code&gt;--virtual-dir&lt;/code&gt; オプションを指定することで正しくプレビューすることができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="line-numbers"&gt;wyam preview --virtual-dir Blog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;プレビューのたびに毎回コマンドを打つことがめんどくさくなるので次のような bat ファイルやシェルスクリプトを作成しておくと楽になります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="line-numbers"&gt;@echo off
wyam -r Blog
wyam preview --virtual-dir Blog
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="github-actions"&gt;GitHub Actions の設定&lt;/h2&gt;
&lt;p&gt;GitHub のリポジトリページに移動し、&lt;code&gt;Actions&lt;/code&gt; タブで新しいワークフローを作成します。
&lt;code&gt;Simple workflow&lt;/code&gt; を作成すると、新規の YAML ファイルがリポジトリの &lt;code&gt;.github/workflows&lt;/code&gt; に作成されます。そして、作成された YAMLファイルを &lt;code&gt;gh-pages.yml&lt;/code&gt; に変更し、次のような内容に変更します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml line-numbers"&gt;name: Wyam

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1.6.0
      with:
        dotnet-version: 2.1
    
    - name: Install Wyam
      run: dotnet tool install --tool-path . Wyam.Tool
    
    - name: Build static site
      run: ./wyam -r blog
      
    - name: GitHub Pages action
      uses: peaceiris/actions-gh-pages@v3.6.4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./output
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この &lt;code&gt;Wyam&lt;/code&gt; というワークフローは &lt;code&gt;master&lt;/code&gt; ブランチに Push または Pull Request が送られたときに、Ubuntu 環境で &lt;code&gt;.NET Core SDK / Runtime&lt;/code&gt; のインストール、&lt;code&gt;Wyam&lt;/code&gt; のインストール、プロジェクトのビルド、GitHub Pages へのデプロイが行われます。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意点&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;.NET Core SDK は Wyamの対応している2.1を使用する。&lt;/li&gt;
&lt;li&gt;Wyam のインストールで &lt;code&gt;--tool-path .&lt;/code&gt; オプションを指定して Wyam ツールをビルド環境のローカルに作成する。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;作成した YAML ファイルを Commit すると、GitHub Actions が有効になり、master ブランチが更新されるため、ワークフローが実行されます。そして、ワークフローのステータスが &lt;code&gt;completed job&lt;/code&gt; になれば成功です。&lt;/p&gt;
&lt;h2 id="github-pages"&gt;GitHub Pages の設定&lt;/h2&gt;
&lt;p&gt;リポジトリが GitHub Pages の条件に満たしていれば、&lt;code&gt;Settings&lt;/code&gt; タブに移動すると、&lt;code&gt;GitHub Pages&lt;/code&gt; の項目が表示されます。そこで &lt;code&gt;Source&lt;/code&gt; 欄の &lt;code&gt;Branch&lt;/code&gt; を &lt;code&gt;gh-pages&lt;/code&gt; に、ディレクトリを &lt;code&gt;/(root)&lt;/code&gt; に変更して &lt;code&gt;Save&lt;/code&gt; することで、GitHub Pagesが有効化されます。&lt;/p&gt;
&lt;p&gt;GitHub Pagesの条件は Public リポジトリであるか、Pro 以上のライセンスであれば Private リポジトリであれば有効です。&lt;/p&gt;
&lt;p&gt;正しく設定ができれば、ユーザページならば &lt;code&gt;ユーザ名.github.io&lt;/code&gt; に、プロジェクトページならば &lt;code&gt;ユーザ名.github.io/リポジトリ名&lt;/code&gt; にプロジェクトがホスティングされます。&lt;/p&gt;
&lt;p&gt;例として、ユーザ名が &lt;code&gt;AconCavy&lt;/code&gt; で リポジトリ名が &lt;code&gt;Blog&lt;/code&gt; の場合は &lt;code&gt;aconcavy.github.io/Blog&lt;/code&gt; にホスティングされます。&lt;/p&gt;
&lt;h1 id="section-8"&gt;まとめ&lt;/h1&gt;
&lt;p&gt;Wyam で 作成した静的 Web サイト (本ブログ) を、GitHub Actions を使って更新を自動化し、GitHub Pages でホスティングする方法をまとめました。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Wyam のプロジェクトを作成する。&lt;/li&gt;
&lt;li&gt;Wyam のプロジェクト設定を変更する。&lt;/li&gt;
&lt;li&gt;GitHub Actions の YAML を編集する。&lt;/li&gt;
&lt;li&gt;GitHub Pages の設定を有効化する。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;大きく分けて4つの手順で、GitHub Pages に Wyam プロジェクトをホスティングすることができます。&lt;/p&gt;
&lt;h1 id="section-9"&gt;あとがき&lt;/h1&gt;
&lt;p&gt;とりあえず本ブログ初の投稿として、本ブログ作成までの手順の記事を簡単に書きました。今後も触った技術や何か変なものをまとめて記事にしたいと思います。&lt;/p&gt;
</content>
		<summary>&lt;p&gt;&lt;a href="https://wyam.io/"&gt;Wyam&lt;/a&gt; を使ってブログを作成し、Github Pages でホスティング、Github Actions でデプロイさせた手順をまとめたものです。&lt;/p&gt;</summary>
	</entry>
</feed>