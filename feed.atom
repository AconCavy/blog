<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<id>https://blog.aconcavy.dev/</id>
	<title />
	<link rel="self" href="https://blog.aconcavy.dev/" />
	<rights>Copyright © 2020-2022 AconCavy</rights>
	<updated>2022-07-17T15:13:01Z</updated>
	<entry>
		<id>https://blog.aconcavy.dev/posts/20220717abc260</id>
		<title>ABC260</title>
		<link href="https://blog.aconcavy.dev/posts/20220717abc260" />
		<updated>2022-07-17T00:00:00Z</updated>
		<content>&lt;h2 id="section"&gt;はじめに&lt;/h2&gt;
&lt;p&gt;AtCoder Beginner Contest 260の復習記事です。&lt;/p&gt;
&lt;p&gt;記事における&lt;code&gt;Scanner&lt;/code&gt;クラスは、自作の入力クラスです。&lt;/p&gt;
&lt;h2 id="section-1"&gt;コンテスト&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc260"&gt;https://atcoder.jp/contests/abc260&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="a"&gt;&lt;a href="https://atcoder.jp/contests/abc260/tasks/abc260_a"&gt;問題A&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc260/submissions/33290941"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文字ごとの出現数を数え上げ、出現数が1つのみ文字を出力します。&lt;br /&gt;
C#の場合、&lt;code&gt;char&lt;/code&gt;型を数値として扱い、小文字のアルファベットから&lt;code&gt;a&lt;/code&gt;を引くことで&lt;code&gt;a,b,c,...&lt;/code&gt;を&lt;code&gt;0,1,2,...&lt;/code&gt;として管理することができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var S = Scanner.Scan&amp;lt;string&amp;gt;();
    var count = new int[26];
    foreach (var c in S)
    {
        count[c - 'a']++;
    }

    for (var i = 0; i &amp;lt; 26; i++)
    {
        if (count[i] == 1)
        {
            Console.WriteLine((char)('a' + i));
            return;
        }
    }

    Console.WriteLine(-1);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="b"&gt;&lt;a href="https://atcoder.jp/contests/abc260/tasks/abc260_b"&gt;問題B&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc260/submissions/33297423"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;受験生の番目、数学のスコア、英語のスコアを&lt;code&gt;Tuple&lt;/code&gt;などのデータクラスとして管理します。&lt;br /&gt;
&lt;code&gt;i&lt;/code&gt;番目の学生が合格したかをフラグとして管理し、それぞれの条件ごとにソートして合格となっていない受験生が対象となるかを判定することで、時間計算量&lt;code&gt;O(NlogN+N)&lt;/code&gt;で答えを求めることができます。&lt;br /&gt;
C#の場合、&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/api/system.array.sort?view=net-6.0#system-array-sort-1(-0()-system-comparison((-0)))"&gt;Array.Sort メソッド&lt;/a&gt;に&lt;code&gt;Comparison&amp;lt;T&amp;gt;&lt;/code&gt;を指定することで、比較関数を与えてソートすることができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var (N, X, Y, Z) = Scanner.Scan&amp;lt;int, int, int, int&amp;gt;();
    var A = Scanner.ScanEnumerable&amp;lt;int&amp;gt;().ToArray();
    var B = Scanner.ScanEnumerable&amp;lt;int&amp;gt;().ToArray();
    var accepts = new bool[N];
    var C = A.Zip(B).Select((x, i) =&amp;gt; (A: x.First, B: x.Second, ID: i)).ToArray();

    Array.Sort(C, (x, y) =&amp;gt;
    {
        var result = y.A.CompareTo(x.A);
        return result == 0 ? x.ID.CompareTo(y.ID) : result;
    });
    for (var i = 0; i &amp;lt; N &amp;amp;&amp;amp; X &amp;gt; 0; i++)
    {
        if (accepts[C[i].ID]) continue;
        accepts[C[i].ID] = true;
        X--;
    }

    Array.Sort(C, (x, y) =&amp;gt;
    {
        var result = y.B.CompareTo(x.B);
        return result == 0 ? x.ID.CompareTo(y.ID) : result;
    });
    for (var i = 0; i &amp;lt; N &amp;amp;&amp;amp; Y &amp;gt; 0; i++)
    {
        if (accepts[C[i].ID]) continue;
        accepts[C[i].ID] = true;
        Y--;
    }

    Array.Sort(C, (x, y) =&amp;gt;
    {
        var result = (y.A + y.B).CompareTo(x.A + x.B);
        return result == 0 ? x.ID.CompareTo(y.ID) : result;
    });
    for (var i = 0; i &amp;lt; N &amp;amp;&amp;amp; Z &amp;gt; 0; i++)
    {
        if (accepts[C[i].ID]) continue;
        accepts[C[i].ID] = true;
        Z--;
    }

    for (var i = 0; i &amp;lt; N; i++)
    {
        if (accepts[i])
        {
            Console.WriteLine(i + 1);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="c"&gt;&lt;a href="https://atcoder.jp/contests/abc260/tasks/abc260_c"&gt;問題C&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc260/submissions/33301206"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;動的計画法で答えを求めます。
赤い宝石と青い宝石のレベルごとの個数をそれぞれ管理し、レベル&lt;code&gt;N&lt;/code&gt;からレベル&lt;code&gt;2&lt;/code&gt;まで計算します。
遷移としては、レベルごとに先に赤い宝石を変換し、次に青い宝石を変換します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var (N, X, Y) = Scanner.Scan&amp;lt;int, long, long&amp;gt;();
    var Red = new long[N + 1];
    var Blue = new long[N + 1];
    Red[N] = 1;
    for (var i = N; i &amp;gt;= 2; i--)
    {
        Red[i - 1] += Red[i];
        Blue[i] += Red[i] * X;
        Red[i - 1] += Blue[i];
        Blue[i - 1] += Blue[i] * Y;
    }

    var answer = Blue[1];
    Console.WriteLine(answer);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="d"&gt;&lt;a href="https://atcoder.jp/contests/abc260/tasks/abc260_d"&gt;問題D&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc260/submissions/33307596"&gt;コンテスト提出&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://atcoder.jp/contests/abc260/submissions/33325148"&gt;復習提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;表になっているカードの集合のうち&lt;code&gt;X&lt;/code&gt;以上の値を高速に求められるようなデータ構造と、カードの山を管理するデータ構造を使って何ターン目に食べられるかを判定します。
前者のデータ構造では、&lt;code&gt;X&lt;/code&gt;以上の値を時間計算量&lt;code&gt;O(N)&lt;/code&gt;で探索してしまうと、全体の時間計算量が&lt;code&gt;O(N^2)&lt;/code&gt;となってしまい実行時間制限に間に合いません。&lt;br /&gt;
そのため、二部探索のような時間計算量&lt;code&gt;O(logN)&lt;/code&gt;で探索できるようなデータ構造(C++の場合は&lt;code&gt;set&lt;/code&gt;、C#の場合は&lt;code&gt;SortedSet&lt;/code&gt;)が必要です。&lt;br /&gt;
&lt;code&gt;SortedSet&lt;/code&gt;から&lt;code&gt;GetViewBetween&lt;/code&gt;したサブセットの&lt;code&gt;Count&lt;/code&gt;プロパティが、場合によっては時間計算量&lt;code&gt;O(1)&lt;/code&gt;ではなさそうなので、&lt;code&gt;LINQ&lt;/code&gt;の&lt;code&gt;Any&lt;/code&gt;で存在判定をしたほうが良さそうです。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var (N, K) = Scanner.Scan&amp;lt;int, int&amp;gt;();
    var P = Scanner.ScanEnumerable&amp;lt;int&amp;gt;().ToArray();
    var answer = new int[N + 1];
    Array.Fill(answer, -1);
    var set = new SortedSet&amp;lt;int&amp;gt;();
    var dict = new Dictionary&amp;lt;int, List&amp;lt;int&amp;gt;&amp;gt;();
    var root = new int[N + 1];
    for (var i = 0; i &amp;lt; N; i++)
    {
        var p = P[i];
        var r = p;
        var subset = set.GetViewBetween(p, N);

        if (subset.Any())
        {
            var q = subset.Min;
            r = root[q];
            root[p] = r;
            dict[r].Add(p);
            set.Remove(q);
            set.Add(p);
        }
        else
        {
            set.Add(p);
            dict[p] = new List&amp;lt;int&amp;gt; { p };
            root[p] = p;
        }

        if (dict[r].Count &amp;gt;= K)
        {
            foreach (var v in dict[r])
            {
                answer[v] = i + 1;
            }

            set.Remove(p);
            dict.Remove(r);
        }
    }

    Console.WriteLine(string.Join(&amp;quot;\n&amp;quot;, answer.Skip(1)));
}
&lt;/code&gt;&lt;/pre&gt;
</content>
		<summary>&lt;p&gt;AtCoder Beginner Contest 260の復習記事です。&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://blog.aconcavy.dev/posts/20220709abc259</id>
		<title>ABC259</title>
		<link href="https://blog.aconcavy.dev/posts/20220709abc259" />
		<updated>2022-07-09T00:00:00Z</updated>
		<content>&lt;h2 id="section"&gt;はじめに&lt;/h2&gt;
&lt;p&gt;AtCoder Beginner Contest 259の復習記事です。&lt;/p&gt;
&lt;p&gt;記事における&lt;code&gt;Scanner&lt;/code&gt;クラスは、自作の入力クラスです。&lt;/p&gt;
&lt;h2 id="section-1"&gt;コンテスト&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc259"&gt;https://atcoder.jp/contests/abc259&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="a"&gt;&lt;a href="https://atcoder.jp/contests/abc259/tasks/abc259_a"&gt;問題A&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc259/submissions/33074995"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;M&amp;lt;X&lt;/code&gt;のとき、&lt;code&gt;D&lt;/code&gt;ずつ&lt;code&gt;X-M&lt;/code&gt;年分変化したので、最終的な身長からその変化分を引いた数&lt;code&gt;T-D*(X-M)&lt;/code&gt;が答えとなります。&lt;br /&gt;
&lt;code&gt;X&amp;lt;=M&lt;/code&gt;のとき、&lt;code&gt;X&lt;/code&gt;歳にはすでに&lt;code&gt;T&lt;/code&gt;であるため、&lt;code&gt;M&lt;/code&gt;歳の時も&lt;code&gt;T&lt;/code&gt;です。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var (N, M, X, T, D) = Scanner.Scan&amp;lt;int, int, int, int, int&amp;gt;();
    var answer = T - D * Math.Max(X - M, 0);
    Console.WriteLine(answer);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="b"&gt;&lt;a href="https://atcoder.jp/contests/abc259/tasks/abc259_b"&gt;問題B&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc259/submissions/33081607"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ベクトル&lt;code&gt;(a,b)&lt;/code&gt;に対して&lt;code&gt;d&lt;/code&gt;度の回転の操作を行います。
これは、&lt;code&gt;x' = x * cos(rad(d)) - y * sin(rad(d))&lt;/code&gt;, &lt;code&gt;y' = x * sin(rad(d)) + y * cos(rad(d))&lt;/code&gt;で表すことができます。
度から弧度法(ラジアン)を求めるには、&lt;code&gt;度 * PI / 180度&lt;/code&gt;で求めることができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var (A, B, D) = Scanner.Scan&amp;lt;double, double, double&amp;gt;();
    var rad = D * Math.PI / 180.0;
    var sin = Math.Sin(rad);
    var cos = Math.Cos(rad);
    var x = A * cos - B * sin;
    var y = A * sin + B * cos;
    Console.WriteLine($&amp;quot;{x} {y}&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="c"&gt;&lt;a href="https://atcoder.jp/contests/abc259/tasks/abc259_c"&gt;問題C&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc259/submissions/33110149"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文字列が一致するということは、同じ文字が連続した区間ごとに分割し、区間順にみたときに次の条件を全ての文字の区間が満たすときになります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;S&lt;/code&gt;と&lt;code&gt;T&lt;/code&gt;の区間で出現する文字が一致する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;S&lt;/code&gt;と&lt;code&gt;T&lt;/code&gt;の区間で文字が連続する長さが両方とも&lt;code&gt;1&lt;/code&gt;である。または、文字が連続する長さが両方とも&lt;code&gt;2&lt;/code&gt;以上かつ&lt;code&gt;T&lt;/code&gt;の文字が連続する長さが&lt;code&gt;S&lt;/code&gt;の文字が連続する長さ以上である。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var S = Scanner.Scan&amp;lt;string&amp;gt;();
    var T = Scanner.Scan&amp;lt;string&amp;gt;();

    List&amp;lt;(char, int)&amp;gt; F(ReadOnlySpan&amp;lt;char&amp;gt; s)
    {
        var result = new List&amp;lt;(char, int)&amp;gt;();
        var r = 0;
        for (var l = 0; l &amp;lt; s.Length;)
        {
            r = l;
            while (r &amp;lt; s.Length &amp;amp;&amp;amp; s[r] == s[l]) r++;
            result.Add((s[l], r - l));
            l = r;
        }

        return result;
    }

    var ss = F(S);
    var tt = F(T);
    var answer = ss.Count == tt.Count;
    if (answer)
    {
        for (var i = 0; i &amp;lt; ss.Count; i++)
        {
            var (s, cs) = ss[i];
            var (t, ct) = tt[i];
            answer &amp;amp;= s == t;
            answer &amp;amp;= cs == ct || cs &amp;gt; 1 &amp;amp;&amp;amp; ct &amp;gt; 1 &amp;amp;&amp;amp; cs &amp;lt; ct;
        }
    }

    Console.WriteLine(answer ? &amp;quot;Yes&amp;quot; : &amp;quot;No&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="d"&gt;&lt;a href="https://atcoder.jp/contests/abc259/tasks/abc259_d"&gt;問題D&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc259/submissions/33103648"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;各円を頂点としたとき、円どうしで移動可能な場合に辺が存在すると考えると、グラフ問題として考えることができます。
ある二つの円が移動可能ということは、その二つの円が共有点を持つということになります。
共有点が存在するかどうかは、一つ目の円の半径を&lt;code&gt;r1&lt;/code&gt;、二つ目の円の半径を&lt;code&gt;r2&lt;/code&gt;、二つの円の中心間の距離を&lt;code&gt;d&lt;/code&gt;としたとき、&lt;code&gt;abs(r1-r2)&amp;lt;=d&amp;lt;=r1+r2&lt;/code&gt;が満たされれるかどうかで判断することができます。
&lt;code&gt;Disjoint Set Union&lt;/code&gt;などのデータ構造や深さ優先探索、幅優先探索などで、&lt;code&gt;(sx,sy)&lt;/code&gt;が含まれる円と&lt;code&gt;(tx,ty)&lt;/code&gt;が含まれる円が連結であるかの判定を行うことで、答えを求めることができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var N = Scanner.Scan&amp;lt;int&amp;gt;();
    var (sx, sy, tx, ty) = Scanner.Scan&amp;lt;long, long, long, long&amp;gt;();
    var s = new Point(sx, sy);
    var t = new Point(tx, ty);

    var P = new (Point P, long R)[N];
    for (var i = 0; i &amp;lt; N; i++)
    {
        var (x, y, r) = Scanner.Scan&amp;lt;long, long, long&amp;gt;();
        P[i] = (new Point(x, y), r);
    }

    long SqD(Point p1, Point p2)
    {
        var dx = p1.X - p2.X;
        var dy = p1.Y - p2.Y;
        return dx * dx + dy * dy;
    }

    var okS = new bool[N];
    var okT = new bool[N];
    for (var i = 0; i &amp;lt; N; i++)
    {
        okS[i] = SqD(s, P[i].P) == P[i].R * P[i].R;
        okT[i] = SqD(t, P[i].P) == P[i].R * P[i].R;
    }

    var dsu = new DisjointSetUnion(N);

    for (var i = 0; i &amp;lt; N; i++)
    {
        for (var j = i + 1; j &amp;lt; N; j++)
        {
            var sqd = SqD(P[i].P, P[j].P);
            var rr1 = P[i].R + P[j].R;
            var rr2 = P[i].R - P[j].R;
            if (rr2 * rr2 &amp;lt;= sqd &amp;amp;&amp;amp; sqd &amp;lt;= rr1 * rr1)
            {
                dsu.Merge(i, j);
            }
        }
    }

    var answer = false;
    for (var i = 0; i &amp;lt; N; i++)
    {
        for (var j = 0; j &amp;lt; N; j++)
        {

            answer |= okS[i] &amp;amp;&amp;amp; okT[j] &amp;amp;&amp;amp; dsu.IsSame(i, j);
        }
    }

    Console.WriteLine(answer ? &amp;quot;Yes&amp;quot; : &amp;quot;No&amp;quot;);
}

public readonly struct Point
{
    public readonly long X;
    public readonly long Y;
    public Point(long x, long y) =&amp;gt; (X, Y) = (x, y);
}
&lt;/code&gt;&lt;/pre&gt;
</content>
		<summary>&lt;p&gt;AtCoder Beginner Contest 259の復習記事です。&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://blog.aconcavy.dev/posts/20220702abc258</id>
		<title>ABC258</title>
		<link href="https://blog.aconcavy.dev/posts/20220702abc258" />
		<updated>2022-07-02T00:00:00Z</updated>
		<content>&lt;h2 id="section"&gt;はじめに&lt;/h2&gt;
&lt;p&gt;AtCoder Beginner Contest 258の復習記事です。&lt;/p&gt;
&lt;p&gt;記事における&lt;code&gt;Scanner&lt;/code&gt;クラスは、自作の入力クラスです。&lt;/p&gt;
&lt;h2 id="section-1"&gt;コンテスト&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc258"&gt;https://atcoder.jp/contests/abc258&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="a"&gt;&lt;a href="https://atcoder.jp/contests/abc258/tasks/abc258_a"&gt;問題A&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc258/submissions/32886264"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1時間は60分なので、Kを60で割った商が経過時、Kを60で割った余りが経過分となるので、&lt;code&gt;21+K/60&lt;/code&gt;時&lt;code&gt;K%60&lt;/code&gt;分が答えとなります。&lt;br /&gt;
C#では文字列補間で&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/standard/base-types/custom-numeric-format-strings"&gt;カスタム数値形式文字列&lt;/a&gt;を使うことで、数値を&lt;code&gt;0&lt;/code&gt;埋めで表示することができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var K = Scanner.Scan&amp;lt;int&amp;gt;();
    var x = K / 60;
    var y = K % 60;
    Console.WriteLine($&amp;quot;{21 + x}:{y:00}&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="b"&gt;&lt;a href="https://atcoder.jp/contests/abc258/tasks/abc258_b"&gt;問題B&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc258/submissions/32895144"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;全てのマスから縦横斜めの8方向にずらした数値を全探索します。&lt;br /&gt;
8方向全てを書くのは大変なので、行と列のそれぞれの移動差分を用意することで、差分に移動量を掛けて範囲内に収まるように&lt;code&gt;N&lt;/code&gt;で割った余りを取ることで、簡単に記述することができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var N = Scanner.Scan&amp;lt;int&amp;gt;();
    var A = new int[N][];
    for (var i = 0; i &amp;lt; N; i++)
    {
        A[i] = Scanner.ScanLine().Select(x =&amp;gt; x - '0').ToArray();
    }

    var D8 = new[] { (1, 0), (-1, 0), (0, 1), (0, -1), (1, 1), (1, -1), (-1, 1), (-1, -1) };

    long answer = 0;
    for (var i = 0; i &amp;lt; N; i++)
    {
        for (var j = 0; j &amp;lt; N; j++)
        {
            foreach (var (di, dj) in D8)
            {
                long v = 0;
                for (var k = 0; k &amp;lt; N; k++)
                {
                    var ii = (i + di * k + N) % N;
                    var jj = (j + dj * k + N) % N;
                    v = v * 10 + A[ii][jj];
                }

                answer = Math.Max(answer, v);
            }
        }
    }

    Console.WriteLine(answer);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="c"&gt;&lt;a href="https://atcoder.jp/contests/abc258/tasks/abc258_c"&gt;問題C&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc258/submissions/32897344"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;クエリごとに文字列を操作してしまうと、クエリごとの計算量が&lt;code&gt;O(N)&lt;/code&gt;、全体の計算量が&lt;code&gt;O(QN)&lt;/code&gt;になってしまい、実行時間制限に間に合わないため、計算量を改善する必要があります。&lt;/p&gt;
&lt;p&gt;クエリ1に注目すると、&lt;code&gt;N&lt;/code&gt;文字目の次を&lt;code&gt;1&lt;/code&gt;文字目としたとき、文字列を&lt;code&gt;x&lt;/code&gt;回右にシフトしてることがわかります。&lt;br /&gt;
そして、文字列を右にシフトすると、先頭の位置は&lt;code&gt;-x&lt;/code&gt;分移動し、移動先が負の場合は&lt;code&gt;N&lt;/code&gt;を足した位置が先頭になります。&lt;br /&gt;
このように、文字列の先頭の位置がどこであるかのみを管理することで、クエリごとの計算量を&lt;code&gt;O(1)&lt;/code&gt;に改善することができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var (N, Q) = Scanner.Scan&amp;lt;int, int&amp;gt;();
    var S = Scanner.Scan&amp;lt;string&amp;gt;();
    var idx = 0;
    while (Q-- &amp;gt; 0)
    {
        var (t, x) = Scanner.Scan&amp;lt;int, int&amp;gt;();
        if (t == 1)
        {
            idx = (idx - x + N) % N;
        }
        else
        {
            var i = (idx + x - 1) % N;
            Console.WriteLine(S[i]);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="d"&gt;&lt;a href="https://atcoder.jp/contests/abc258/tasks/abc258_d"&gt;問題D&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc258/submissions/32901859"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;i番目のステージまでに必要な最小の時間 + 初回攻略時間 + (i番目のステージで必要な時間 * 残り回数全てを)&lt;/code&gt;が&lt;code&gt;i&lt;/code&gt;番目のステージおける時間の最小値となるとなるので、全てのステージにおける時間の最小値の最小値が答えとなります。
ステージごとに毎度&lt;code&gt;i&lt;/code&gt;番目のステージまでに必要な最小の時間を計算してしまうと時間計算量が&lt;code&gt;O(N)&lt;/code&gt;かかってしまうので、累積和を用いることで&lt;code&gt;O(1)&lt;/code&gt;に改善することができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var (N, X) = Scanner.Scan&amp;lt;int, int&amp;gt;();
    var AB = new (long A, long B)[N];
    for (var i = 0; i &amp;lt; N; i++)
    {
        AB[i] = Scanner.Scan&amp;lt;long, long&amp;gt;();
    }

    var minStarts = new long[N];
    for (var i = 1; i &amp;lt; N; i++)
    {
        minStarts[i] = minStarts[i - 1] + AB[i - 1].A + AB[i - 1].B;
    }

    const long inf = (long)4e18;
    var answer = inf;
    for (var i = 0; i &amp;lt; N; i++)
    {
        var x = Math.Max(0, X - (i + 1));
        var time = sum + AB[i].A + AB[i].B + x * AB[i].B;
        answer = Math.Min(answer, time);
        sum += AB[i].A + AB[i].B;
    }

    Console.WriteLine(answer);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="e"&gt;&lt;a href="https://atcoder.jp/contests/abc258/tasks/abc258_e"&gt;問題E&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc258/submissions/32937679"&gt;復習提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;i&lt;/code&gt;番目のじゃがいもを開始位置としたとき、1つの箱に必要なじゃがいもの個数を&lt;code&gt;C[i]&lt;/code&gt;とすると、次の箱に使うじゃがいもの開始位置は&lt;code&gt;(i+C[i])%N&lt;/code&gt;となり、開始位置の集合は最大でも&lt;code&gt;N&lt;/code&gt;の有向グラフとして表すことができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-text line-numbers"&gt;# 入力例1
# 3 2 5
# 3 4 1
# 1
# 2

0番目のじゃがいもから箱を作る: {0, 1}    =&amp;gt; 2個 =&amp;gt; 次は (0+2)%3 = 2番目のじゃがいも
2番目のじゃがいもから箱を作る: {2, 0, 1} =&amp;gt; 3個 =&amp;gt; 次は (2+3)%3 = 2番目のじゃがいも
2番目のじゃがいもから箱を作る: {2, 0, 1} =&amp;gt; 3個 =&amp;gt; 次は (2+3)%3 = 2番目のじゃがいも
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このことから、有効グラフのK番目の頂点に値する開始位置における必要なじゃがいもの個数が答えとなります。
時間計算量について、&lt;code&gt;C[i]&lt;/code&gt;は累積和と尺取り法を使うことで&lt;code&gt;O(N)&lt;/code&gt;、有効グラフも&lt;code&gt;O(N)&lt;/code&gt;で事前に計算でき、クエリに対して&lt;code&gt;O(1)&lt;/code&gt;で答えを求めることができるので、全体の時間計算量は&lt;code&gt;O(N+Q)&lt;/code&gt;となります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var (N, Q, X) = Scanner.Scan&amp;lt;int, int, long&amp;gt;();
    var W = Scanner.ScanEnumerable&amp;lt;long&amp;gt;().ToArray();
    var sum = W.Sum();

    var cumW = new long[N * 2 + 1];
    for (var i = 0; i &amp;lt; N * 2; i++)
    {
        cumW[i + 1] = cumW[i] + W[i % N];
    }

    var counts = new long[N];
    {
        var r = 0;
        var x = X % sum;
        for (var l = 0; l &amp;lt; N; l++)
        {
            counts[l] = X / sum * N;
            while (cumW[r] - cumW[l] &amp;lt; x) r++;
            counts[l] += r - l;
        }
    }

    var next = new int[N];
    for (var i = 0; i &amp;lt; N; i++)
    {
        next[i] = (int)((i + counts[i]) % N);
    }

    var steps = new List&amp;lt;int&amp;gt;();
    var dict = new Dictionary&amp;lt;int, int&amp;gt;();
    var noLoopLength = 0;
    var loopLength = 0;
    {
        var curr = 0;
        for (var i = 0;; i++)
        {
            if (dict.ContainsKey(curr))
            {
                noLoopLength = dict[curr];
                loopLength = i - dict[curr];
                break;
            }

            dict[curr] = i;
            steps.Add(curr);
            curr = next[curr];
        }
    }

    while (Q-- &amp;gt; 0)
    {
        var K = Scanner.Scan&amp;lt;long&amp;gt;() - 1;
        if (K &amp;lt;= noLoopLength)
        {
            var box = steps[(int)K];
            Console.WriteLine(counts[box]);
        }
        else
        {
            var mod = (K - noLoopLength) % loopLength;
            var box = steps[(int)(noLoopLength + mod)];
            Console.WriteLine(counts[box]);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
</content>
		<summary>&lt;p&gt;AtCoder Beginner Contest 258の復習記事です。&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://blog.aconcavy.dev/posts/20220625abc257</id>
		<title>ABC257</title>
		<link href="https://blog.aconcavy.dev/posts/20220625abc257" />
		<updated>2022-06-25T00:00:00Z</updated>
		<content>&lt;h2 id="section"&gt;はじめに&lt;/h2&gt;
&lt;p&gt;AtCoder Beginner Contest 257の復習記事です。&lt;/p&gt;
&lt;p&gt;記事における&lt;code&gt;Scanner&lt;/code&gt;クラスは、自作の入力クラスです。&lt;/p&gt;
&lt;h2 id="section-1"&gt;コンテスト&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc257"&gt;https://atcoder.jp/contests/abc257&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="a"&gt;&lt;a href="https://atcoder.jp/contests/abc257/tasks/abc257_a"&gt;問題A&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc257/submissions/32714875"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;長さ&lt;code&gt;N*26&lt;/code&gt;の文字列の&lt;code&gt;X&lt;/code&gt;番目の文字は何かと言い換えられるので、&lt;code&gt;X&lt;/code&gt;を&lt;code&gt;0-indexed&lt;/code&gt;に変換した&lt;code&gt;X-1&lt;/code&gt;番目を&lt;code&gt;N&lt;/code&gt;で割った番目のアルファベットが答えとなります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var (N, X) = Scanner.Scan&amp;lt;int, int&amp;gt;();
    var answer = (char)((X - 1) / N + 'A');
    Console.WriteLine(answer);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="b"&gt;&lt;a href="https://atcoder.jp/contests/abc257/tasks/abc257_b"&gt;問題B&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc257/submissions/32714940"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;A&lt;/code&gt;の位置と番号のペアとして位置を昇順にソートしたものを&lt;code&gt;B&lt;/code&gt;、駒のあるマスを&lt;code&gt;X&lt;/code&gt;、各クエリを&lt;code&gt;l&lt;/code&gt;番目の駒に対する操作としたとき、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;l+1&amp;lt;K&lt;/code&gt;のとき、&lt;code&gt;B[l]のX&lt;/code&gt;と&lt;code&gt;B[l+1]のX&lt;/code&gt;が隣り合っていなければ&lt;code&gt;B[l]のX&lt;/code&gt;を&lt;code&gt;+1&lt;/code&gt;する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l==K&lt;/code&gt;のとき、&lt;code&gt;B[l]のX&lt;/code&gt;が&lt;code&gt;N&lt;/code&gt;未満であれば&lt;code&gt;B[l]のX&lt;/code&gt;を&lt;code&gt;+1&lt;/code&gt;する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;のように操作し、すべての操作が終わったときの&lt;code&gt;X&lt;/code&gt;が答えとなります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var (N, K, Q) = Scanner.Scan&amp;lt;int, int, int&amp;gt;();
    var A = Scanner.ScanEnumerable&amp;lt;int&amp;gt;().ToArray();
    var L = Scanner.ScanEnumerable&amp;lt;int&amp;gt;().ToArray();
    var B = A.Select((x, i) =&amp;gt; (x, i)).ToArray();
    Array.Sort(B, (x, y) =&amp;gt; x.x.CompareTo(y.x));
    foreach (var l in L.Select(x =&amp;gt; x - 1))
    {
        if (l + 1 &amp;lt; K)
        {
            if (B[l].x + 1 != B[l + 1].x) B[l].x++;
        }
        else
        {
            if (B[l].x &amp;lt; N) B[l].x++;
        }
    }

    Console.WriteLine(string.Join(&amp;quot; &amp;quot;, B.Select(x =&amp;gt; x.x)));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="c"&gt;&lt;a href="https://atcoder.jp/contests/abc257/tasks/abc257_c"&gt;問題C&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc257/submissions/32722188"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;X=0&lt;/code&gt;のとき&lt;code&gt;f(X)=大人の数&lt;/code&gt;であり、&lt;code&gt;X=infinity&lt;/code&gt;のとき&lt;code&gt;f(X)=子供の数&lt;/code&gt;であることから、答えは最小でも&lt;code&gt;Max(f(0), f(1e9+1))&lt;/code&gt;であることがわかります。
そして、子供と大人の座標を別々に管理しそれぞれを昇順でソートしておくことで、体重&lt;code&gt;X&lt;/code&gt;未満の子供の数と体重&lt;code&gt;X&lt;/code&gt;以上の大人の数を二部探索で調べることができるようになるので、境界としてありえる&lt;code&gt;N&lt;/code&gt;人全ての&lt;code&gt;W&lt;/code&gt;について調べることで答えを求めることができます。
計算量は子供と大人の分類に&lt;code&gt;O(N)&lt;/code&gt;、ソートに&lt;code&gt;(NlogN)&lt;/code&gt;、各クエリごとに&lt;code&gt;O(logN)&lt;/code&gt;なので、全体で&lt;code&gt;O(NlogN)&lt;/code&gt;で答えを求めることができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var N = Scanner.Scan&amp;lt;int&amp;gt;();
    var S = Scanner.Scan&amp;lt;string&amp;gt;();
    var W = Scanner.ScanEnumerable&amp;lt;int&amp;gt;().ToList();

    var child = new List&amp;lt;int&amp;gt;();
    var adult = new List&amp;lt;int&amp;gt;();
    for (var i = 0; i &amp;lt; N; i++)
    {
        (S[i] == '0' ? child : adult).Add(W[i]);
    }

    child.Sort();
    adult.Sort();

    var answer = Math.Max(child.Count, adult.Count);
    foreach (var w in W)
    {
        var c1 = LowerBound(child, w);
        var c2 = adult.Count - LowerBound(adult, w);
        answer = Math.Max(answer, c1 + c2);
    }

    Console.WriteLine(answer);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="d"&gt;&lt;a href="https://atcoder.jp/contests/abc257/tasks/abc257_d"&gt;問題D&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc257/submissions/32737230"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;各始点について、全てのジャンプ台に移動可能な最小の&lt;code&gt;S&lt;/code&gt;について二部探索をおこない、その最小を求めます。
二部探索の判定式として、始点から幅優先探索を行うことで&lt;code&gt;O(N^2)&lt;/code&gt;で全てのジャンプ台に移動可能かを判定することができます。
全体計算量&lt;code&gt;O(N^3logN)&lt;/code&gt;で答えを求めることができます。
あるジャンプ台から別のジャンプ台へ移動可能か判定する際に、&lt;code&gt;P*S&amp;gt;=|x0-x1|+|y0-x1|&lt;/code&gt;の右辺は最大で&lt;code&gt;4e9&lt;/code&gt;であることに注意しましょう。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var N = Scanner.Scan&amp;lt;int&amp;gt;();
    var Jumps = new Jump[N];
    for (var i = 0; i &amp;lt; N; i++)
    {
        var (x, y, p) = Scanner.Scan&amp;lt;long, long, long&amp;gt;();
        Jumps[i] = new Jump(x, y, p);
    }

    bool CanMove(Jump from, Jump to, long s)
    {
        var d = Math.Abs(from.X - to.X) + Math.Abs(from.Y - to.Y);
        return s &amp;gt;= d || from.P * s &amp;gt;= d;
    }

    const long inf = (long)4e9;
    var answer = inf;
    for (var k = 0; k &amp;lt; N; k++)
    {
        bool F(long s)
        {
            var queue = new Queue&amp;lt;Jump&amp;gt;();
            var used = new bool[N];

            used[k] = true;
            queue.Enqueue(Jumps[k]);

            while (queue.Count &amp;gt; 0)
            {
                var u = queue.Dequeue();
                for (var i = 0; i &amp;lt; N; i++)
                {
                    if (!used[i] &amp;amp;&amp;amp; CanMove(u, Jumps[i], s))
                    {
                        used[i] = true;
                        queue.Enqueue(Jumps[i]);
                    }
                }
            }

            return used.All(x =&amp;gt; x);
        }

        var s = BinarySearch(-1, inf, F);
        answer = Math.Min(answer, s);
    }

    Console.WriteLine(answer);
}

public readonly struct Jump
{
    public readonly long X;
    public readonly long Y;
    public readonly long P;
    public Jump(long x, long y, long p) =&amp;gt; (X, Y, P) = (x, y, p);
}

public static long BinarySearch(long ng, long ok, Func&amp;lt;long, bool&amp;gt; func)
{
    while (Math.Abs(ok - ng) &amp;gt; 1)
    {
        var m = (ok + ng) / 2;
        if (func(m)) ok = m;
        else ng = m;
    }

    return ok;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="e"&gt;&lt;a href="https://atcoder.jp/contests/abc257/tasks/abc257_e"&gt;問題E&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc257/submissions/32752336"&gt;復習提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C&lt;/code&gt;の最小を&lt;code&gt;min&lt;/code&gt;としたとき、桁数は最大でも&lt;code&gt;N/min&lt;/code&gt;になります。
その桁数が構成できるもののうち、ある桁の値&lt;code&gt;d&lt;/code&gt;は、&lt;code&gt;C[d]&lt;/code&gt;とその桁より右側を&lt;code&gt;min&lt;/code&gt;にしたときの和であり、その和がその時点で採用することができれば、その桁を&lt;code&gt;d&lt;/code&gt;とすることができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var N = Scanner.Scan&amp;lt;long&amp;gt;();
    var C = Scanner.ScanEnumerable&amp;lt;long&amp;gt;().ToArray();

    var min = C.Min();
    var length = N / min;
    var builder = new StringBuilder();
    for (var i = 0; i &amp;lt; length; i++)
    {
        for (var d = 9; d &amp;gt;= 1; j--)
        {
            if (min * (length - 1 - i) + C[d - 1] &amp;lt;= N)
            {
                N -= C[d - 1];
                builder.Append((char)(d + '0'));
                break;
            }
        }
    }

    var answer = builder.ToString();
    Console.WriteLine(answer);
}
&lt;/code&gt;&lt;/pre&gt;
</content>
		<summary>&lt;p&gt;AtCoder Beginner Contest 257の復習記事です。&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://blog.aconcavy.dev/posts/20220618abc256</id>
		<title>ABC256</title>
		<link href="https://blog.aconcavy.dev/posts/20220618abc256" />
		<updated>2022-06-18T00:00:00Z</updated>
		<content>&lt;h2 id="section"&gt;はじめに&lt;/h2&gt;
&lt;p&gt;AtCoder Beginner Contest 256の復習記事です。&lt;/p&gt;
&lt;p&gt;記事における&lt;code&gt;Scanner&lt;/code&gt;クラスは、自作の入力クラスです。&lt;/p&gt;
&lt;h2 id="section-1"&gt;コンテスト&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc256"&gt;https://atcoder.jp/contests/abc256&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="a"&gt;&lt;a href="https://atcoder.jp/contests/abc256/tasks/abc256_a"&gt;問題A&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/ABC256/submissions/32536346"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Math.Pow(2, N)&lt;/code&gt;や&lt;code&gt;1&lt;/code&gt;をNビットシフトした値が答えとなります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var N = Scanner.Scan&amp;lt;int&amp;gt;();
    var answer = 1L &amp;lt;&amp;lt; N;
    Console.WriteLine(answer);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="b"&gt;&lt;a href="https://atcoder.jp/contests/abc256/tasks/abc256_b"&gt;問題B&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/ABC256/submissions/32541675"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;各ターンの初めに位置&lt;code&gt;0&lt;/code&gt;に1を足し、位置&lt;code&gt;3,2,1,0&lt;/code&gt;の順で&lt;code&gt;Min(現在の位置+a,4)&lt;/code&gt;に移動させるシミュレーションを行います。
位置の操作を&lt;code&gt;0,1,2,3&lt;/code&gt;ではなく逆順で処理することで、移動した後の現在の位置を&lt;code&gt;0&lt;/code&gt;にすることができるので、何個移動させたかを記録せずに操作できるようになります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var N = Scanner.Scan&amp;lt;int&amp;gt;();
    var A = Scanner.ScanEnumerable&amp;lt;int&amp;gt;().ToArray();
    var g = new int[5];
    foreach (var a in A)
    {
        g[0]++;
        for (var i = 3; i &amp;gt;= 0; i--)
        {
            g[Math.Min(i + a, 4)] += g[i];
            g[i] = 0;
        }
    }

    var answer = g[4];
    Console.WriteLine(answer);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="c"&gt;&lt;a href="https://atcoder.jp/contests/abc256/tasks/abc256_c"&gt;問題C&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/ABC256/submissions/32554919"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;全てのマスを全探索してしまうと&lt;code&gt;30^9&lt;/code&gt;通りとなり、実行時間制限に間に合いません。
しかし、左上の&lt;code&gt;2x2&lt;/code&gt;マスさえわかれば、3行目と3列目の数字が固定されるので、&lt;code&gt;30^4&lt;/code&gt;の全探索で済むようになります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var (H1, H2, H3, W1, W2, W3) = Scanner.Scan&amp;lt;int, int, int, int, int, int&amp;gt;();
    var answer = 0;
    for (var h1w1 = 1; h1w1 &amp;lt; Math.Min(H1, W1); h1w1++)
    {
        for (var h2w1 = 1; h1w1 + h2w1 &amp;lt; W1; h2w1++)
        {
            for (var h1w2 = 1; h1w1 + h1w2 &amp;lt; H1; h1w2++)
            {
                for (var h2w2 = 1; h1w2 + h2w2 &amp;lt; W2 &amp;amp;&amp;amp; h2w1 + h2w2 &amp;lt; H2; h2w2++)
                {
                    var h3w1 = W1 - h1w1 - h2w1;
                    var h3w2 = W2 - h1w2 - h2w2;
                    var h1w3 = H1 - h1w1 - h1w2;
                    var h2w3 = H2 - h2w1 - h2w2;
                    if (H3 - h3w1 - h3w2 == W3 - h1w3 - h2w3 &amp;amp;&amp;amp; W3 - h1w3 - h2w3 &amp;gt; 0)
                    {
                        answer++;
                    }
                }
            }
        }
    }

    Console.WriteLine(answer);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="d"&gt;&lt;a href="https://atcoder.jp/contests/abc256/tasks/abc256_d"&gt;問題D&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/ABC256/submissions/32558635"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;区間の左側を昇順で並べたときに、ある区間の左側よりもその直前区間の右側が大きい場合、その二つの区間をマージすることができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var N = Scanner.Scan&amp;lt;int&amp;gt;();
    var range = new (int L, int R)[N];
    for (var i = 0; i &amp;lt; N; i++)
    {
        range[i] = Scanner.Scan&amp;lt;int, int&amp;gt;();
    }

    Array.Sort(range, (x, y) =&amp;gt; x.L.CompareTo(y.L));
    var answer = new List&amp;lt;(int L, int R)&amp;gt;();
    answer.Add(range[0]);

    foreach (var (l, r) in range.Skip(1))
    {
        if (answer[^1].R &amp;gt;= l)
        {
            answer[^1] = (Math.Min(answer[^1].L, l), Math.Max(answer[^1].R, r));
        }
        else
        {
            answer.Add((l, r));
        }
    }

    answer.Sort((x, y) =&amp;gt; x.L.CompareTo(y.L));
    foreach (var (l, r) in answer)
    {
        Console.WriteLine($&amp;quot;{l} {r}&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="e"&gt;&lt;a href="https://atcoder.jp/contests/abc256/tasks/abc256_e"&gt;問題E&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/ABC256/submissions/32565127"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;嫌いな人との関係を有効辺として考えることで、グラフとして考えることができるようになります。&lt;br /&gt;
N頂点N辺のグラフであることから、連結成分ごとにサイクルは多くても1個であることがわかります。&lt;br /&gt;
そこで、グラフを強連結成分ごとに分解し、サイクル内の最小の不満を受け入れることで、サイクルごとの不満度を最小にすることができます。&lt;br /&gt;
そして、サイクルごとの不満度の総和が答えとなります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var N = Scanner.Scan&amp;lt;int&amp;gt;();
    var X = Scanner.ScanEnumerable&amp;lt;int&amp;gt;().Select(x =&amp;gt; x - 1).ToArray();
    var C = Scanner.ScanEnumerable&amp;lt;long&amp;gt;().ToArray();
    var scc = new StronglyConnectedComponent(N);
    for (var i = 0; i &amp;lt; N; i++)
    {
        scc.AddEdge(i, X[i]);
    }

    const long inf = (long)1e18;
    var answer = 0L;
    foreach (var graph in scc.GetGraph())
    {
        if (graph.Count == 1) continue;
        var min = inf;
        foreach (var u in graph)
        {
            min = Math.Min(min, C[u]);
        }

        answer += min;
    }

    Console.WriteLine(answer);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;強連結成分は&lt;code&gt;ACL&lt;/code&gt;の&lt;code&gt;scc&lt;/code&gt;等で求めることができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public class StronglyConnectedComponent
{
    public int Length { get; }
    private readonly List&amp;lt;(int, Edge)&amp;gt; _edges;

    public StronglyConnectedComponent(int length)
    {
        if (length &amp;lt; 0) throw new ArgumentOutOfRangeException(nameof(length));
        Length = length;
        _edges = new List&amp;lt;(int, Edge)&amp;gt;();
    }

    public void AddEdge(int from, int to)
    {
        if (from &amp;lt; 0 || Length &amp;lt;= from) throw new ArgumentOutOfRangeException(nameof(from));
        if (to &amp;lt; 0 || Length &amp;lt;= to) throw new ArgumentOutOfRangeException(nameof(to));
        _edges.Add((from, new Edge(to)));
    }

    public (int GroupCount, int[] IDs) GetIDs()
    {
        var g = new CompressedSparseRow&amp;lt;Edge&amp;gt;(Length, _edges);
        var (nowOrd, groupCount) = (0, 0);
        var visited = new Stack&amp;lt;int&amp;gt;(Length);
        var low = new int[Length];
        var ord = new int[Length];
        Array.Fill(ord, -1);
        var ids = new int[Length];

        void Dfs(int v)
        {
            low[v] = ord[v] = nowOrd++;
            visited.Push(v);
            for (var i = g.Start[v]; i &amp;lt; g.Start[v + 1]; i++)
            {
                var to = g.Edges[i].To;
                if (ord[to] == -1)
                {
                    Dfs(to);
                    low[v] = Math.Min(low[v], low[to]);
                }
                else
                {
                    low[v] = Math.Min(low[v], ord[to]);
                }
            }

            if (low[v] != ord[v]) return;
            while (true)
            {
                var u = visited.Pop();
                ord[u] = Length;
                ids[u] = groupCount;
                if (u == v) break;
            }

            groupCount++;
        }

        for (var i = 0; i &amp;lt; Length; i++)
        {
            if (ord[i] == -1)
                Dfs(i);
        }

        for (var i = 0; i &amp;lt; Length; i++)
        {
            ids[i] = groupCount - 1 - ids[i];
        }

        return (groupCount, ids);
    }

    public IReadOnlyList&amp;lt;IReadOnlyList&amp;lt;int&amp;gt;&amp;gt; GetGraph()
    {
        var (groupCount, ids) = GetIDs();
        var groups = new List&amp;lt;int&amp;gt;[groupCount];
        for (var i = 0; i &amp;lt; groups.Length; i++)
        {
            groups[i] = new List&amp;lt;int&amp;gt;();
        }

        foreach (var (id, index) in ids.Select((x, i) =&amp;gt; (x, i)))
        {
            groups[id].Add(index);
        }

        return groups;
    }

    private readonly struct Edge
    {
        public readonly int To;
        public Edge(int to) =&amp;gt; To = to;
    }
}

public class CompressedSparseRow&amp;lt;T&amp;gt;
{
    public CompressedSparseRow(int length, IEnumerable&amp;lt;(int ID, T)&amp;gt; edges)
    {
        Start = new int[length + 1];
        var es = edges.ToArray();
        Edges = new T[es.Length];
        foreach (var e in es) Start[e.ID + 1]++;
        for (var i = 0; i &amp;lt; length; i++) Start[i + 1] += Start[i];
        var counter = new int[length + 1];
        Start.AsSpan().CopyTo(counter.AsSpan());
        foreach (var (i, t) in es) Edges[counter[i]++] = t;
    }

    public int[] Start { get; }
    public T[] Edges { get; }
}
&lt;/code&gt;&lt;/pre&gt;
</content>
		<summary>&lt;p&gt;AtCoder Beginner Contest 256の復習記事です。&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://blog.aconcavy.dev/posts/20220611abc255</id>
		<title>ABC255</title>
		<link href="https://blog.aconcavy.dev/posts/20220611abc255" />
		<updated>2022-06-11T00:00:00Z</updated>
		<content>&lt;h2 id="section"&gt;はじめに&lt;/h2&gt;
&lt;p&gt;AtCoder Beginner Contest 255の復習記事です。&lt;/p&gt;
&lt;p&gt;記事における&lt;code&gt;Scanner&lt;/code&gt;クラスは、自作の入力クラスです。&lt;/p&gt;
&lt;h2 id="section-1"&gt;コンテスト&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc255"&gt;https://atcoder.jp/contests/abc255&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="a"&gt;&lt;a href="https://atcoder.jp/contests/abc255/tasks/abc255_a"&gt;問題A&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/ABC255/submissions/32372739"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;R&lt;/code&gt;と&lt;code&gt;C&lt;/code&gt;の値ごとに場合分けして答えることもできますが(4通り)、&lt;code&gt;2*2&lt;/code&gt;の行列&lt;code&gt;M&lt;/code&gt;として値を保持して&lt;code&gt;M[R][C]&lt;/code&gt;の値を答えることもできます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var (R, C) = Scanner.Scan&amp;lt;int, int&amp;gt;();
    R--; C--;
    var M = new int[2][];
    for (var i = 0; i &amp;lt; 2; i++)
    {
        M[i] = Scanner.ScanEnumerable&amp;lt;int&amp;gt;().ToArray();
    }

    var answer = M[R][C];
    Console.WriteLine(answer);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="b"&gt;&lt;a href="https://atcoder.jp/contests/abc255/tasks/abc255_b"&gt;問題B&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/ABC255/submissions/32381972"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ある人を照らすために必要な&lt;code&gt;R&lt;/code&gt;は、何れかの明かりを持つことができる人の位置からの最小距離であり、その&lt;code&gt;R&lt;/code&gt;の最大値を求めることで全ての人をカバーすることができます。&lt;br /&gt;
距離&lt;code&gt;D&lt;/code&gt;は二点の&lt;code&gt;X&lt;/code&gt;の差分&lt;code&gt;dx&lt;/code&gt;と&lt;code&gt;Y&lt;/code&gt;の差分を&lt;code&gt;dy&lt;/code&gt;としたとき、&lt;code&gt;D = Sqrt(dx^2 + dy^2)&lt;/code&gt;で求めることができますが、&lt;code&gt;D &amp;lt; D'&lt;/code&gt;ならば、&lt;code&gt;D^2 &amp;lt; D'^2&lt;/code&gt;なので、距離の二乗の値で走査することで、最後に答えを求めるときを除いて実数による誤差を無視することができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var (N, K) = Scanner.Scan&amp;lt;int, int&amp;gt;();
    var A = Scanner.ScanEnumerable&amp;lt;int&amp;gt;().Select(x =&amp;gt; x - 1).ToArray();
    var P = new (long X, long Y)[N];
    for (var i = 0; i &amp;lt; N; i++)
    {
        var (x, y) = Scanner.Scan&amp;lt;long, long&amp;gt;();
        P[i] = (x, y);
    }

    var answer = 0L;
    for (var i = 0; i &amp;lt; N; i++)
    {
        var min = inf;
        for (var i = 0; i &amp;lt; N; i++)
        {
            var dx = P[a].X - P[i].X;
            var dy = P[a].Y - P[i].Y;
            var d = dx * dx + dy * dy;
            min = Math.Min(min, d);
        }

        answer = Math.Max(answer, min);
    }

    Console.WriteLine(answer);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;答え&lt;code&gt;R&lt;/code&gt;の二部探索でも答えを求めることができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var (N, K) = Scanner.Scan&amp;lt;int, int&amp;gt;();
    var A = Scanner.ScanEnumerable&amp;lt;int&amp;gt;().Select(x =&amp;gt; x - 1).ToArray();
    var P = new (long X, long Y)[N];
    for (var i = 0; i &amp;lt; N; i++)
    {
        var (x, y) = Scanner.Scan&amp;lt;long, long&amp;gt;();
        P[i] = (x, y);
    }

    bool F(long x)
    {
        var ok = new bool[N];
        foreach (var a in A)
        {
            for (var i = 0; i &amp;lt; N; i++)
            {
                var dx = P[a].X - P[i].X;
                var dy = P[a].Y - P[i].Y;
                var d = dx * dx + dy * dy;
                ok[i] |= d &amp;lt;= x;
            }
        }

        return ok.All(x =&amp;gt; x);
    }

    const long inf = (long)1e18;
    var answer = Math.Sqrt(BinarySearch(-1, inf, F));
    Console.WriteLine(answer);
}

public static long BinarySearch(long ng, long ok, Func&amp;lt;long, bool&amp;gt; func)
{
    while (Math.Abs(ok - ng) &amp;gt; 1)
    {
        var m = (ok + ng) / 2;
        if (func(m)) ok = m;
        else ng = m;
    }
    return ok;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="c"&gt;&lt;a href="https://atcoder.jp/contests/abc255/tasks/abc255_c"&gt;問題C&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/ABC255/submissions/32396621"&gt;コンテスト提出&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://atcoder.jp/contests/ABC255/submissions/32418071"&gt;復習提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;D=0&lt;/code&gt;のときは明らかに、&lt;code&gt;Abs(X-A)&lt;/code&gt;となります。
以下それ以外のときに&lt;code&gt;d=(X-A)/D&lt;/code&gt;とし、&lt;code&gt;x&lt;/code&gt;を初項を除く項数の数として&lt;code&gt;F(x)=Abs(X-(A+D*x))&lt;/code&gt;としたとき、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&amp;lt;=d&amp;lt;=N-2&lt;/code&gt;のとき、&lt;code&gt;初項+d項目&lt;/code&gt;と&lt;code&gt;初項+(d+1)項目&lt;/code&gt;の間に&lt;code&gt;X&lt;/code&gt;が存在するため、&lt;code&gt;F(d)&lt;/code&gt;と&lt;code&gt;F(d+1)&lt;/code&gt;の回数が小さいほうが答えとなります。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d=N-1&lt;/code&gt;のとき、&lt;code&gt;N&lt;/code&gt;項より大きな項にすることができないため、&lt;code&gt;F(N-1)&lt;/code&gt;となります。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d&amp;lt;0&lt;/code&gt;のとき、&lt;code&gt;1&lt;/code&gt;項より小さな項にすることができないため、&lt;code&gt;F(0)&lt;/code&gt;となります。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このことから、&lt;code&gt;d&lt;/code&gt;を&lt;code&gt;0&amp;lt;=d&amp;lt;=N-1&lt;/code&gt;に制限したときの&lt;code&gt;F(d)&lt;/code&gt;と&lt;code&gt;d+1&amp;lt;=N-1&lt;/code&gt;ならば&lt;code&gt;F(d+1)&lt;/code&gt;の回数が小さいほうが答えとなります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var (X, A, D, N) = Scanner.Scan&amp;lt;long, long, long, long&amp;gt;();

    long F(long n)
    {
        return Math.Abs(X - (A + n * D));
    }

    if (D == 0)
    {
        Console.WriteLine(F(0));
        return;
    }

    var n = Math.Max(0, Math.Min(N - 1, (X - A) / D));
    var answer = F(n);
    if (n + 1 &amp;lt;= N - 1) answer = Math.Min(answer, F(n + 1));
    Console.WriteLine(answer);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="d"&gt;&lt;a href="https://atcoder.jp/contests/abc255/tasks/abc255_d"&gt;問題D&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/ABC255/submissions/32399982"&gt;コンテスト提出&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://atcoder.jp/contests/ABC255/submissions/32418084"&gt;復習提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;クエリごとに&lt;code&gt;A&lt;/code&gt;の値を走査してしまうと、&lt;code&gt;O(QN)&lt;/code&gt;かかってしまい、実行時間制限に間に合いません。
そこで、&lt;code&gt;A&lt;/code&gt;の値をソートし、&lt;code&gt;A&lt;/code&gt;において&lt;code&gt;X&lt;/code&gt;以上が現れる位置&lt;code&gt;i (0-indexed)&lt;/code&gt;において左右に二つに分けた場合、左側の操作に必要な回数は&lt;code&gt;X*左側の個数 - A[0..i)の合計&lt;/code&gt;となり、右側の操作に必要な回数は&lt;code&gt;A[i..N)の合計 - X*右側の個数&lt;/code&gt;となることがわかります。&lt;br /&gt;
そのため、あらかじめ&lt;code&gt;A&lt;/code&gt;の累積和を求めておき、クエリごとに&lt;code&gt;A&lt;/code&gt;において&lt;code&gt;X&lt;/code&gt;以上が現れる位置を二部探索で求めることで、位置を求めることに&lt;code&gt;O(logN)&lt;/code&gt;、左側の合計と右側の合計を求めることに&lt;code&gt;O(1)&lt;/code&gt;で対応することができ、全体で&lt;code&gt;O(QlogN)&lt;/code&gt;で求めることができるようになります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var (N, Q) = Scanner.Scan&amp;lt;int, int&amp;gt;();
    var A = Scanner.ScanEnumerable&amp;lt;long&amp;gt;().ToArray();
    Array.Sort(A);
    var cum = new long[N + 1];
    for (var i = 0; i &amp;lt; N; i++)
    {
        cum[i + 1] = cum[i] + A[i];
    }

    while (Q-- &amp;gt; 0)
    {
        var X = Scanner.Scan&amp;lt;long&amp;gt;();
        var l = LowerBound(A, X);
        var r = N - l;
        var answer = Math.Abs(cum[l] - X * l) + Math.Abs((cum[N] - cum[l]) - X * r);
        Console.WriteLine(answer);
    }
}

public static int LowerBound&amp;lt;T&amp;gt;(ReadOnlySpan&amp;lt;T&amp;gt; source, T key) where T : IComparable&amp;lt;T&amp;gt;
{
    var (l, r) = (-1, source.Length);
    while (r - l &amp;gt; 1)
    {
        var m = l + (r - l) / 2;
        if (source[m].CompareTo(key) &amp;gt;= 0) r = m;
        else l = m;
    }
    return r;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="e"&gt;&lt;a href="https://atcoder.jp/contests/abc255/tasks/abc255_e"&gt;問題E&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/ABC255/submissions/32416252"&gt;復習提出&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var (N, M) = Scanner.Scan&amp;lt;int, int&amp;gt;();
    var S = Scanner.ScanEnumerable&amp;lt;long&amp;gt;().ToArray();
    var X = Scanner.ScanEnumerable&amp;lt;long&amp;gt;().ToArray();

    var B = new long[N];
    for (var i = 0; i &amp;lt; N - 1; i++)
    {
        B[i + 1] = S[i] - B[i];
    }

    var dict = new Dictionary&amp;lt;long, long&amp;gt;();
    for (var i = 0; i &amp;lt; N; i++)
    {
        for (var j = 0; j &amp;lt; M; j++)
        {
            var c = X[j] - B[i];
            if (i % 2 == 1) c *= -1;
            if (!dict.ContainsKey(c)) dict[c] = 0;
            dict[c]++;
        }
    }

    var answer = dict.Values.Max();
    Console.WriteLine(answer);
}
&lt;/code&gt;&lt;/pre&gt;
</content>
		<summary>&lt;p&gt;AtCoder Beginner Contest 255の復習記事です。&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://blog.aconcavy.dev/posts/20220604abc254</id>
		<title>ABC254</title>
		<link href="https://blog.aconcavy.dev/posts/20220604abc254" />
		<updated>2022-06-04T00:00:00Z</updated>
		<content>&lt;h2 id="section"&gt;はじめに&lt;/h2&gt;
&lt;p&gt;AtCoder Beginner Contest 254の復習記事です。&lt;/p&gt;
&lt;p&gt;記事における&lt;code&gt;Scanner&lt;/code&gt;クラスは、自作の入力クラスです。&lt;/p&gt;
&lt;h2 id="section-1"&gt;コンテスト&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc254"&gt;https://atcoder.jp/contests/abc254&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="a"&gt;&lt;a href="https://atcoder.jp/contests/abc254/tasks/abc254_a"&gt;問題A&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/ABC254/submissions/32198774"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文字列として入力を取り、文字列の後ろ2文字を表示します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var N = Scanner.Scan&amp;lt;string&amp;gt;();
    var answer = N[^2..];
    Console.WriteLine(answer);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="b"&gt;&lt;a href="https://atcoder.jp/contests/abc254/tasks/abc254_b"&gt;問題B&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/ABC254/submissions/32202968"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;問題文に沿って実装をします。
これはパスカルの三角形、二項係数を表します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var N = Scanner.Scan&amp;lt;int&amp;gt;();
    var nCk = new long[N, N];
    for (var i = 0; i &amp;lt; N; i++)
    {
        for (var j = 0; j &amp;lt;= i; j++)
        {
            if (j == 0 || j == i) nCk[i, j] = 1;
            else nCk[i, j] = nCk[i - 1, j - 1] + nCk[i - 1, j];
        }
    }

    for (var i = 0; i &amp;lt; N; i++)
    {
        for (var j = 0; j &amp;lt;= i; j++)
        {
            Console.Write(nCk[i, j]);
            Console.Write(j == i ? '\n' : ' ');
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="c"&gt;&lt;a href="https://atcoder.jp/contests/abc254/tasks/abc254_c"&gt;問題C&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/ABC254/submissions/32210520"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;A[i]&lt;/code&gt;が入れ替え可能な位置として、&lt;code&gt;A[i+K]&lt;/code&gt;や&lt;code&gt;A[i+k*2]&lt;/code&gt;のように&lt;code&gt;i+Kの倍数&lt;/code&gt;の何れかの値と入れ替えることができることがわかります。
そのため、&lt;code&gt;i%K番目&lt;/code&gt;のグループごとに値をソートし、数列&lt;code&gt;B&lt;/code&gt;の&lt;code&gt;i&lt;/code&gt;番目に&lt;code&gt;i%K番目&lt;/code&gt;のグループの&lt;code&gt;i/K&lt;/code&gt;番目の値を復元してできたものが、&lt;code&gt;A&lt;/code&gt;をソートしたものと一致かを判定します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-text line-numbers"&gt;A = [3, 4, 1, 3, 4]
G[0] = [3, 1, 4] -&amp;gt; [1, 3, 4]
G[1] = [4, 3] -&amp;gt; [3, 4]
B = [1, 3, 3, 4, 4]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var (N, K) = Scanner.Scan&amp;lt;int, int&amp;gt;();
    var A = Scanner.ScanEnumerable&amp;lt;int&amp;gt;().ToArray();
    var G = new int[K][].Select(x =&amp;gt; new List&amp;lt;int&amp;gt;()).ToArray();
    for (var i = 0; i &amp;lt; N; i++)
    {
        G[i % K].Add(A[i]);
    }

    for (var i = 0; i &amp;lt; K; i++)
    {
        G[i].Sort();
    }

    var B = new List&amp;lt;int&amp;gt;();
    for (var i = 0; i &amp;lt; N; i++)
    {
        B.Add(G[i % K][i / K]);
    }

    var C = A.OrderBy(x =&amp;gt; x).ToArray();
    var answer = true;
    for (var i = 0; i &amp;lt; N; i++)
    {
        answer &amp;amp;= B[i] == C[i];
    }

    Console.WriteLine(answer ? &amp;quot;Yes&amp;quot; : &amp;quot;No&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="d"&gt;&lt;a href="https://atcoder.jp/contests/abc254/tasks/abc254_d"&gt;問題D&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/ABC254/submissions/32245869"&gt;復習提出&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var N = Scanner.Scan&amp;lt;long&amp;gt;();
    var sq = new bool[N + 1];
    for (var i = 1; i * i &amp;lt;= N; i++)
    {
        sq[i * i] = true;
    }

    var count = new long[N + 1];
    for (var i = 1; i &amp;lt;= N; i++)
    {
        long j = 0;
        foreach (var d in GetDivisors(i))
        {
            if (sq[d]) j = Math.Max(j, d);
        }

        count[i / j]++;
    }

    var answer = 0L;
    for (var i = 1; i &amp;lt;= N; i++)
    {
        answer += count[i] * count[i];
    }

    Console.WriteLine(answer);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="e"&gt;&lt;a href="https://atcoder.jp/contests/abc254/tasks/abc254_e"&gt;問題E&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/ABC254/submissions/32243464"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;各クエリに対して、全ての頂点をメモしてDFSやBFSをしてしまうと、時間計算量が&lt;code&gt;O(QM)&lt;/code&gt;となってしまい、実行時間制限に間に合いません。
しかし、制約にグラフの各頂点の時数は&lt;code&gt;3&lt;/code&gt;以下であり、&lt;code&gt;0&amp;lt;=k&amp;lt;=3&lt;/code&gt;とあることから、クエリあたり最大でも距離が&lt;code&gt;0&lt;/code&gt;から&lt;code&gt;3&lt;/code&gt;の頂点の和&lt;code&gt;1+3^1+3^2+3^3=1+3+9+27=40&lt;/code&gt;しかないことがわかります。
そのため、訪れた頂点のみを&lt;code&gt;HashSet&lt;/code&gt;などで管理することで、実行時間制限に間に合わせることができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var (N, M) = Scanner.Scan&amp;lt;int, int&amp;gt;();
    var G = new List&amp;lt;int&amp;gt;[N].Select(x =&amp;gt; new List&amp;lt;int&amp;gt;()).ToArray();
    for (var i = 0; i &amp;lt; M; i++)
    {
        var (a, b) = Scanner.Scan&amp;lt;int, int&amp;gt;();
        a--; b--;
        G[a].Add(b);
        G[b].Add(a);
    }

    var Q = Scanner.Scan&amp;lt;int&amp;gt;();
    while (Q-- &amp;gt; 0)
    {
        var (x, k) = Scanner.Scan&amp;lt;int, int&amp;gt;();
        x--;
        var set = new HashSet&amp;lt;long&amp;gt;();
        var queue = new Queue&amp;lt;(int, int)&amp;gt;();
        set.Add(x);
        queue.Enqueue((x, 0));
        while (queue.Count &amp;gt; 0)
        {
            var (u, d) = queue.Dequeue();
            if (d == k) continue;
            foreach (var v in G[u])
            {
                if (set.Contains(v)) continue;
                set.Add(v);
                queue.Enqueue((v, d + 1));
            }
        }

        var answer = set.Sum() + set.Count;
        Console.WriteLine(answer);
    }
}
&lt;/code&gt;&lt;/pre&gt;
</content>
		<summary>&lt;p&gt;AtCoder Beginner Contest 254の復習記事です。&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://blog.aconcavy.dev/posts/20220528abc253</id>
		<title>ABC253</title>
		<link href="https://blog.aconcavy.dev/posts/20220528abc253" />
		<updated>2022-05-28T00:00:00Z</updated>
		<content>&lt;h2 id="section"&gt;はじめに&lt;/h2&gt;
&lt;p&gt;AtCoder Beginner Contest 253の復習記事です。&lt;/p&gt;
&lt;p&gt;記事における&lt;code&gt;Scanner&lt;/code&gt;クラスは、自作の入力クラスです。&lt;/p&gt;
&lt;h2 id="section-1"&gt;コンテスト&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc253"&gt;https://atcoder.jp/contests/abc253&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="a"&gt;&lt;a href="https://atcoder.jp/contests/abc253/tasks/abc253_a"&gt;問題A&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc253/submissions/31997507"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;要素が3つしかないため、3つの値の合計から最大値と最小値を引いた値が中央値として求めることができるので、中央値が&lt;code&gt;B&lt;/code&gt;と一致しているかを判定します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var A = Scanner.ScanEnumerable&amp;lt;int&amp;gt;().ToArray();
    var mid = A.Sum() - A.Min() - A.Max();
    var answer = A[1] == mid ? &amp;quot;Yes&amp;quot; : &amp;quot;No&amp;quot;;
    Console.WriteLine(answer);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="b"&gt;&lt;a href="https://atcoder.jp/contests/abc253/tasks/abc253_b"&gt;問題B&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc253/submissions/32003197"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(h1,w1)&lt;/code&gt;から&lt;code&gt;(h2,w2)&lt;/code&gt;への移動回数は縦横の差分の合計&lt;code&gt;Abs(h2-h1) + Abs(w2-w1)&lt;/code&gt;で求めることができます。&lt;br /&gt;
2つの&lt;code&gt;o&lt;/code&gt;の位置を取得は、1つ目ならば&lt;code&gt;(h1,w1)&lt;/code&gt;を更新し、2つ目ならば&lt;code&gt;(h2,w2)&lt;/code&gt;を更新するようにフラグなどで管理することで判定できます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var (H, W) = Scanner.Scan&amp;lt;int, int&amp;gt;();
    var G = new string[H];
    for (var i = 0; i &amp;lt; H; i++)
    {
        G[i] = Scanner.Scan&amp;lt;string&amp;gt;();
    }

    var (h1, w1) = (0, 0);
    var (h2, w2) = (0, 0);
    var ok = false;
    for (var i = 0; i &amp;lt; H; i++)
    {
        for (var j = 0; j &amp;lt; W; j++)
        {
            if (G[i][j] == '-') continue;
            if (!ok)
            {
                (h1, w1) = (i, j);
                ok = true;
            }
            else
            {
                (h2, w2) = (i, j);
            }
        }
    }

    var answer = Math.Abs(h2 - h1) + Math.Abs(w2 - w1);
    Console.WriteLine(answer);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="c"&gt;&lt;a href="https://atcoder.jp/contests/abc253/tasks/abc253_c"&gt;問題C&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc253/submissions/32010454"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;リストを使って集合の管理をしてしまうと、クエリごとの最悪時間計算量が&lt;code&gt;O(NlogN)&lt;/code&gt;になってしまい、全体で&lt;code&gt;O(QNlogN)&lt;/code&gt;となり、実行時間制限に間に合いません。&lt;br /&gt;
そこで、ソートされている集合(C#では&lt;code&gt;SortedSet&lt;/code&gt;)等を実際に集合に存在する値に対して使うことで、要素の追加を&lt;code&gt;O(logN)&lt;/code&gt;、最大値の最小値の取得を&lt;code&gt;O(1)&lt;/code&gt;で行うことができ、全体で&lt;code&gt;O(QlogN)&lt;/code&gt;に改善することができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var Q = Scanner.Scan&amp;lt;int&amp;gt;();
    var set = new SortedSet&amp;lt;int&amp;gt;();
    var dict = new Dictionary&amp;lt;int, long&amp;gt;();
    while (Q-- &amp;gt; 0)
    {
        var query = Scanner.ScanEnumerable&amp;lt;int&amp;gt;().ToArray();
        if (query[0] == 1)
        {
            var x = query[1];
            if (!dict.ContainsKey(x)) dict[x] = 0;
            dict[x]++;
            set.Add(x);
        }
        else if (query[0] == 2)
        {
            var (x, c) = (query[1], query[2]);
            if (!dict.ContainsKey(x)) dict[x] = 0;
            dict[x] -= Math.Min(dict[x], c);
            if (dict[x] == 0)
            {
                set.Remove(x);
            }
        }
        else
        {
            var answer = set.Max - set.Min;
            Console.WriteLine(answer);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="d"&gt;&lt;a href="https://atcoder.jp/contests/abc253/tasks/abc253_d"&gt;問題D&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc253/submissions/32035460"&gt;コンテスト提出&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://atcoder.jp/contests/abc253/submissions/32057974"&gt;復習提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;N&lt;/code&gt;以下の値を全て捜査してしまうと、時間計算量が&lt;code&gt;O(N)&lt;/code&gt;になってしまい、&lt;code&gt;N=1e9&lt;/code&gt;の場合に間に合いません。
そこで、&lt;code&gt;1&lt;/code&gt;から&lt;code&gt;N&lt;/code&gt;までの総和から、&lt;code&gt;A&lt;/code&gt;の倍数の総和と&lt;code&gt;B&lt;/code&gt;の倍数の総和を引き、&lt;code&gt;A&lt;/code&gt;と&lt;code&gt;B&lt;/code&gt;の最小公倍数の総和を足すことで&lt;code&gt;O(logMin(a,b))&lt;/code&gt;で求めることができます。&lt;br /&gt;
&lt;code&gt;1&lt;/code&gt;から&lt;code&gt;x&lt;/code&gt;までの総和は、&lt;code&gt;F(x) = x * (x+1) / 2&lt;/code&gt;で求められるので、1から&lt;code&gt;N&lt;/code&gt;までの総和は&lt;code&gt;F(N)&lt;/code&gt;で求めることができます。&lt;br /&gt;
&lt;code&gt;N&lt;/code&gt;以下の&lt;code&gt;X&lt;/code&gt;の倍数の総和は、&lt;code&gt;N&lt;/code&gt;以下に&lt;code&gt;X&lt;/code&gt;の倍数は&lt;code&gt;N/X&lt;/code&gt;個あるため、&lt;code&gt;M=N/X&lt;/code&gt;としたとき、&lt;code&gt;X*F(M)&lt;/code&gt;で求めることができます。
よって、&lt;code&gt;x&lt;/code&gt;と&lt;code&gt;y&lt;/code&gt;の最小公倍数を&lt;code&gt;LCM(x,y)&lt;/code&gt;としたとき、&lt;code&gt;F(N) - F(N/A)*A - F(N/B)*B + F(N/LCM(A,B))*LCM(A,B)&lt;/code&gt;で求めることができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var (N, A, B) = Scanner.Scan&amp;lt;long, long, long&amp;gt;();

    long F(long x) =&amp;gt; x * (x + 1) / 2;
    long G(long n, long a, long b)
    {
        var result = F(n);
        result -= a * F(n / a);
        result -= b * F(n / b);
        var lcm = Lcm(a, b);
        result += lcm * F(n / lcm);
        return result;
    }

    var answer = G(N, A, B);
    Console.WriteLine(answer);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="e"&gt;&lt;a href="https://atcoder.jp/contests/abc253/tasks/abc253_e"&gt;問題E&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc253/submissions/32057606"&gt;復習提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;累積和を求めながら動的計画法をすることで求めることができます。
初期状態として、&lt;code&gt;[1,M]&lt;/code&gt;は各&lt;code&gt;1&lt;/code&gt;になり、&lt;code&gt;i+1&lt;/code&gt;項目への遷移は&lt;code&gt;dp[i][0..j-k] + dp[i][j+k..M]&lt;/code&gt;の総和となります。
区間和&lt;code&gt;dp[i][0..j-k] + dp[i][j+k..M]&lt;/code&gt;を各&lt;code&gt;j&lt;/code&gt;に対して求めてしまうと、時間計算量が&lt;code&gt;O(M)&lt;/code&gt;かかってしまうので、あらかじめ累積和を取っておくことで、&lt;code&gt;j&lt;/code&gt;ごとに&lt;code&gt;O(1)&lt;/code&gt;で区間和を求めることができます。
&lt;code&gt;K=0&lt;/code&gt;のときには注意が必要で、&lt;code&gt;dp[i][1..M]&lt;/code&gt;の総和が遷移します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var (N, M, K) = Scanner.Scan&amp;lt;int, int, int&amp;gt;();
    var dp = new mint[N + 1, M + 10];
    for (var j = 1; j &amp;lt;= M; j++)
    {
        dp[0, j] = 1;
    }

    for (var i = 0; i &amp;lt; N; i++)
    {
        var cum = new mint[M + 10];
        for (var j = 1; j &amp;lt;= M; j++)
        {
            cum[j + 1] = cum[j] + dp[i, j];
        }

        for (var j = 1; j &amp;lt;= M; j++)
        {
            if (K &amp;gt; 0)
            {
                var l1 = 0;
                var r1 = Math.Max(0, j - K) + 1;
                var l2 = Math.Min(M + 1, j + K);
                var r2 = M + 1;
                dp[i + 1, j] += cum[r1] - cum[l1] + cum[r2] - cum[l2];
            }
            else
            {
                dp[i + 1, j] += cum[M + 1];
            }
        }
    }

    mint answer = 0;
    for (var i = 1; i &amp;lt;= M; i++)
    {
        answer += dp[N - 1, i];
    }

    Console.WriteLine(answer);
}
&lt;/code&gt;&lt;/pre&gt;
</content>
		<summary>&lt;p&gt;AtCoder Beginner Contest 253の復習記事です。&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://blog.aconcavy.dev/posts/20220521abc252</id>
		<title>ABC252</title>
		<link href="https://blog.aconcavy.dev/posts/20220521abc252" />
		<updated>2022-05-22T00:00:00Z</updated>
		<content>&lt;h2 id="section"&gt;はじめに&lt;/h2&gt;
&lt;p&gt;AtCoder Beginner Contest 252の復習記事です。&lt;/p&gt;
&lt;p&gt;記事における&lt;code&gt;Scanner&lt;/code&gt;クラスは、自作の入力クラスです。&lt;/p&gt;
&lt;h2 id="section-1"&gt;コンテスト&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc252"&gt;https://atcoder.jp/contests/abc252&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="a"&gt;&lt;a href="https://atcoder.jp/contests/abc252/tasks/abc252_a"&gt;問題A&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc252/submissions/31834327"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C#では&lt;code&gt;char&lt;/code&gt;の&lt;code&gt;0-255&lt;/code&gt;にはASCII文字コードが割り当てられているため、数値を&lt;code&gt;char&lt;/code&gt;型に明示的に変換することで、与えられた数値に対する文字に変換することができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var N = Scanner.Scan&amp;lt;int&amp;gt;();
    var answer = (char)N;
    Console.WriteLine(answer);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="b"&gt;&lt;a href="https://atcoder.jp/contests/abc252/tasks/abc252_b"&gt;問題B&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc252/submissions/31840735"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;おいしさが最大のときの食品の番号の集合をとり、&lt;code&gt;B&lt;/code&gt;の何れかがその集合に存在していれば&lt;code&gt;Yes&lt;/code&gt;、そうでなければ&lt;code&gt;No&lt;/code&gt;となります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var (N, K) = Scanner.Scan&amp;lt;int, int&amp;gt;();
    var A = Scanner.ScanEnumerable&amp;lt;int&amp;gt;().ToArray();
    var B = Scanner.ScanEnumerable&amp;lt;int&amp;gt;().ToArray();
    var set = new HashSet&amp;lt;int&amp;gt;();
    var max = -1;
    for (var i = 0; i &amp;lt; N; i++)
    {
        if (max &amp;lt; A[i])
        {
            max = A[i];
            set.Clear();
            set.Add(i + 1);
        }
        else if (max == A[i])
        {
            set.Add(i + 1);
        }
    }

    var answer = false;
    foreach (var b in B)
    {
        answer |= set.Contains(b);
    }

    Console.WriteLine(answer ? &amp;quot;Yes&amp;quot; : &amp;quot;No&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="c"&gt;&lt;a href="https://atcoder.jp/contests/abc252/tasks/abc252_c"&gt;問題C&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc252/submissions/31852070"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;表示される数字を全探索して最小となる秒数を求めます。&lt;br /&gt;
各リールにおいて指定した数字が出現する秒数を&lt;code&gt;N&lt;/code&gt;周分保持し、出現する秒数が早い順から採用します。&lt;br /&gt;
採用したリールをメモしておき、全てのリールが採用された時の秒数の最小を出力します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var N = Scanner.Scan&amp;lt;int&amp;gt;();
    var S = new int[N][];
    for (var i = 0; i &amp;lt; N; i++)
    {
        var s = Scanner.Scan&amp;lt;string&amp;gt;();
        S[i] = s.Select(x =&amp;gt; x - '0').ToArray();
    }

    const long inf = (long)1e18;
    var answer = inf;
    for (var n = 0; n &amp;lt; 10; n++)
    {
        var list = new List&amp;lt;(int T, int ID)&amp;gt;();
        for (var i = 0; i &amp;lt; N; i++)
        {
            var idx = Array.IndexOf(S[i], n);
            list.AddRange(Enumerable.Range(0, N).Select(x =&amp;gt; (x * 10 + idx, i)));
        }

        list.Sort((x, y) =&amp;gt; x.T.CompareTo(y.T));
        var used = new HashSet&amp;lt;int&amp;gt;();
        var curr = -1;
        foreach (var (t, i) in list)
        {
            if (t &amp;lt;= curr || used.Contains(i)) continue;
            used.Add(i);
            curr = t;
            if (used.Count == N)
            {
                answer = Math.Min(answer, curr);
                break;
            }
        }
    }

    Console.WriteLine(answer);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="d"&gt;&lt;a href="https://atcoder.jp/contests/abc252/tasks/abc252_d"&gt;問題D&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc252/submissions/31867979"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;愚直に&lt;code&gt;i,j,k&lt;/code&gt;の全ての組み合わせを全探索してしまうと、数え上げの時間計算量が&lt;code&gt;O(N^3)&lt;/code&gt;となり、実行時間制限に間に合わないません。
そこで、出現する数値をまとめて数え上げます。
以下数値をまとめた個数の配列を&lt;code&gt;C&lt;/code&gt;、&lt;code&gt;C&lt;/code&gt;の長さを&lt;code&gt;M&lt;/code&gt;とします。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C&lt;/code&gt;のうち、&lt;code&gt;0&amp;lt;=i&amp;lt;j&amp;lt;k&amp;lt;M&lt;/code&gt;となる&lt;code&gt;i,j,k&lt;/code&gt;の組み合わせを全探索すると、時間計算量が&lt;code&gt;O(M^3)&lt;/code&gt;であり、時間計算量はまだ改善できていません。
まず、&lt;code&gt;C&lt;/code&gt;のうち&lt;code&gt;0&amp;lt;=j&amp;lt;k&amp;lt;M&lt;/code&gt;となる&lt;code&gt;j,k&lt;/code&gt;組み合わせを愚直に考えると、以下のように数え上げることができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;for(var j = 0; j &amp;lt; M; j++)
{
    for(var k = j + 1; k &amp;lt; M; k++)
    {
        sumJK += C[j] * C[k];
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この場合、&lt;code&gt;j,k&lt;/code&gt;の組み合わせは時間計算量&lt;code&gt;O(M^2)&lt;/code&gt;で求めることができますが、&lt;code&gt;j&lt;/code&gt;を固定したときの組み合わせの個数は、&lt;code&gt;C[j]*(C[j+1] + C[j+2] + .. + C[M-1])&lt;/code&gt;となり、&lt;code&gt;C[j]&lt;/code&gt;に&lt;code&gt;j&lt;/code&gt;以降の累積和をかけたものであることがわかります。
そのため、&lt;code&gt;C[k]&lt;/code&gt;の累積和をあらかじめ求めておくことで、数え上げの時間計算量を&lt;code&gt;O(M)&lt;/code&gt;に改善することができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;for (var k = M - 1; k &amp;gt;= 0; k--)
{
    cumK[k] = C[k] + cumK[k + 1];
}

for(var j = 0; j &amp;lt; M; j++)
{
    sumJK += C[j] * cumK[j + 1];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これを利用すると、&lt;code&gt;C&lt;/code&gt;のうち&lt;code&gt;0&amp;lt;=i&amp;lt;j&amp;lt;k&amp;lt;M&lt;/code&gt;となる&lt;code&gt;i,j,k&lt;/code&gt;の組み合わせは時間計算量&lt;code&gt;O(M^2)&lt;/code&gt;で求めることができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;for(var i = 0; i &amp;lt; M; i++)
{
    for(var j = i + 1; j &amp;lt; M; j++)
    {
        sumIJK += C[i] * C[j] * cumK[j + 1];
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;また、&lt;code&gt;i&lt;/code&gt;を固定したときの組み合わせは、&lt;code&gt;C[i] * (C[i+1]*cumK[i+2] + C[i+2]*cumK[i+3] + .. + C[M-2]*cumK[M-1])&lt;/code&gt;となり、&lt;code&gt;C[i]&lt;/code&gt;に&lt;code&gt;i&lt;/code&gt;以降の&lt;code&gt;C&lt;/code&gt;と&lt;code&gt;C[k]&lt;/code&gt;の累積和をかけたものの累積和であることがわかります。
そのため、&lt;code&gt;C[j]&lt;/code&gt;に&lt;code&gt;C[k]&lt;/code&gt;の累積和をかけたものの累積和をあらかじめ求めておくことで、数え上げの時間計算量を&lt;code&gt;O(M)&lt;/code&gt;に改善することができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;for (var j = M - 1; k &amp;gt;= 0; k--)
{
    cumJ[k] = C[j] * cumK[j + 1] + cumJ[j + 1];
}

for(var i = 0; i &amp;lt; M; j++)
{
    sumIJK += C[i] * cumJ[i + 1];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上により、時間計算量&lt;code&gt;O(M)&lt;/code&gt;で答えを求めることができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var N = Scanner.Scan&amp;lt;int&amp;gt;();
    var A = Scanner.ScanEnumerable&amp;lt;int&amp;gt;().ToArray();
    var count = new int[(int)2e5 + 1];
    foreach (var a in A)
    {
        count[a]++;
    }

    var C = count.Where(x =&amp;gt; x &amp;gt; 0).ToArray();
    var M = C.Length;

    var cumK = new long[M + 1];
    var cumJ = new long[M + 1];
    for (var k = M - 1; k &amp;gt;= 0; k--)
    {
        cumK[k] = C[k] + cumK[k + 1];
    }

    for (var j = M - 1; j &amp;gt;= 0; j--)
    {
        cumJ[j] = C[j] * cumK[j + 1] + cumJ[j + 1];
    }

    long answer = 0;
    for (var i = 0; i &amp;lt; M; i++)
    {
        answer += C[i] * cumJ[i + 1];
    }

    Console.WriteLine(answer);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="e"&gt;&lt;a href="https://atcoder.jp/contests/abc252/tasks/abc252_e"&gt;問題E&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc252/submissions/31874511"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;頂点&lt;code&gt;1&lt;/code&gt;からの最短経路を求め、各頂点への最短経路とその直前の頂点を結ぶ&lt;code&gt;N-1&lt;/code&gt;本の道が答えとなります。&lt;br /&gt;
これは、頂点&lt;code&gt;1&lt;/code&gt;から頂点&lt;code&gt;v&lt;/code&gt;への最短経路があるとき、その経路上の頂点&lt;code&gt;u&lt;/code&gt;への経路は、頂点&lt;code&gt;1&lt;/code&gt;から頂点&lt;code&gt;u&lt;/code&gt;への最短経路であることからわかります。
ダイクストラ法で頂点&lt;code&gt;1&lt;/code&gt;から各頂点への最短経路を求めるときに、各頂点の直前の頂点をメモしておき、頂点&lt;code&gt;v&lt;/code&gt;の直前の頂点&lt;code&gt;u&lt;/code&gt;をつなぐ道が何番目の道であるかを実装することで答えを求めることができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var (N, M) = Scanner.Scan&amp;lt;int, int&amp;gt;();
    var dict = new Dictionary&amp;lt;(int U, int V), int&amp;gt;();
    var G = new List&amp;lt;(int, long)&amp;gt;[N].Select(x =&amp;gt; new List&amp;lt;(int, long)&amp;gt;()).ToArray();
    for (var i = 0; i &amp;lt; M; i++)
    {
        var (a, b, c) = Scanner.Scan&amp;lt;int, int, long&amp;gt;();
        a--; b--;
        G[a].Add((b, c));
        G[b].Add((a, c));

        dict[(a, b)] = dict[(b, a)] = i + 1;
    }

    var costs = new long[N];
    Array.Fill(costs, long.MaxValue);
    costs[0] = 0;
    var queue = new PriorityQueue&amp;lt;(int U, long Cost)&amp;gt;((x, y) =&amp;gt; x.Cost.CompareTo(y.Cost));
    queue.Enqueue((0, 0));
    var prev = new int[N];
    while (queue.Count &amp;gt; 0)
    {
        var (u, cu) = queue.Dequeue();
        if (costs[u] &amp;lt; cu) continue;
        foreach (var (v, cv) in G[u])
        {
            var c = costs[u] + cv;
            if (costs[v] &amp;lt;= c) continue;
            costs[v] = c;
            prev[v] = u;
            queue.Enqueue((v, c));
        }
    }

    var answer = new List&amp;lt;int&amp;gt;();
    for (var v = 1; v &amp;lt; N; v++)
    {
        var u = prev[v];
        answer.Add(dict[(u, v)]);
    }

    Console.WriteLine(string.Join(&amp;quot; &amp;quot;, answer));
}
&lt;/code&gt;&lt;/pre&gt;
</content>
		<summary>&lt;p&gt;AtCoder Beginner Contest 252の復習記事です。&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://blog.aconcavy.dev/posts/20220514abc251</id>
		<title>ABC251</title>
		<link href="https://blog.aconcavy.dev/posts/20220514abc251" />
		<updated>2022-05-14T00:00:00Z</updated>
		<content>&lt;h2 id="section"&gt;はじめに&lt;/h2&gt;
&lt;p&gt;AtCoder Beginner Contest 251の復習記事です。&lt;/p&gt;
&lt;p&gt;記事における&lt;code&gt;Scanner&lt;/code&gt;クラスは、自作の入力クラスです。&lt;/p&gt;
&lt;h2 id="section-1"&gt;コンテスト&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc251"&gt;https://atcoder.jp/contests/abc251&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="a"&gt;&lt;a href="https://atcoder.jp/contests/abc251/tasks/abc251_a"&gt;問題A&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc251/submissions/31659858"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;S&lt;/code&gt;を繰り返して長さ6以上の文字列を作成し、長さ6の文字を&lt;code&gt;SubString&lt;/code&gt;や&lt;code&gt;Range&lt;/code&gt;で作成します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var S = Scanner.Scan&amp;lt;string&amp;gt;();
    var answer = S;
    while (answer.Length &amp;lt; 6)
    {
        answer += S;
    }

    answer = answer[0..6];
    Console.WriteLine(answer);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="b"&gt;&lt;a href="https://atcoder.jp/contests/abc251/tasks/abc251_b"&gt;問題B&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc251/submissions/31659934"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1&amp;lt;=i,j,k&amp;lt;=N&lt;/code&gt;の組み合わせのうち、&lt;code&gt;A[i]&lt;/code&gt;、&lt;code&gt;A[i]+A[j]&lt;/code&gt;、&lt;code&gt;A[i]+A[j]+A[k]&lt;/code&gt;かつ&lt;code&gt;W&lt;/code&gt;以下になる組み合わせを全探索し、重複をなくしたものが答えとなります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var (N, W) = Scanner.Scan&amp;lt;int, int&amp;gt;();
    var A = Scanner.ScanEnumerable&amp;lt;int&amp;gt;().ToArray();
    var set = new HashSet&amp;lt;int&amp;gt;();
    for (var i = 0; i &amp;lt; N; i++)
    {
        set.Add(A[i]);
        for (var j = i + 1; j &amp;lt; N; j++)
        {
            set.Add(A[i] + A[j]);
            for (var k = j + 1; k &amp;lt; N; k++)
            {
                set.Add(A[i] + A[j] + A[k]);
            }
        }
    }

    var answer = set.Count(x =&amp;gt; x &amp;lt;= W);
    Console.WriteLine(answer);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="c"&gt;&lt;a href="https://atcoder.jp/contests/abc251/tasks/abc251_c"&gt;問題C&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc251/submissions/31664269"&gt;コンテスト提出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;各文字列において2番目以降のスコアを無視したとき、スコアが最大の文字列が何番目にでてくるかを解答します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var N = Scanner.Scan&amp;lt;int&amp;gt;();
    var sub = new (string S, int T)[N];
    for (var i = 0; i &amp;lt; N; i++)
    {
        var (s, t) = Scanner.Scan&amp;lt;string, int&amp;gt;();
        sub[i] = (s, t);
    }

    var dict = new Dictionary&amp;lt;string, int&amp;gt;();

    for (var i = N - 1; i &amp;gt;= 0; i--)
    {
        var (s, t) = sub[i];
        dict[s] = t;
    }

    var max = -1;
    var result = &amp;quot;&amp;quot;;
    foreach (var (s, t) in dict)
    {
        if (max &amp;lt; t)
        {
            max = t;
            result = s;
        }
    }

    for (var i = 0; i &amp;lt; N; i++)
    {
        if (result == sub[i].S)
        {
            Console.WriteLine(i + 1);
            return;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="d"&gt;&lt;a href="https://atcoder.jp/contests/abc251/tasks/abc251_d"&gt;問題D&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc251/submissions/31695211"&gt;復習提出&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;なにこれ?????????&lt;/li&gt;
&lt;li&gt;フィボナッチ数列とかでどうにかならないか&lt;/li&gt;
&lt;li&gt;&lt;code&gt;W=100,000&lt;/code&gt;が解ければよさそう&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;1-100&lt;/code&gt;、&lt;code&gt;100-10000&lt;/code&gt;、&lt;code&gt;10000-1000000&lt;/code&gt;をカバーできれば全ての範囲をカバーできるようです。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var W = Scanner.Scan&amp;lt;int&amp;gt;();
    var list = new List&amp;lt;int&amp;gt;();

    for (var i = 1; i &amp;lt;= 100; i++)
    {
        list.Add(i);
        list.Add(i * 100);
        list.Add(i * 10000);
    }

    Console.WriteLine(list.Count);
    Console.WriteLine(string.Join(&amp;quot; &amp;quot;, list));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="e"&gt;&lt;a href="https://atcoder.jp/contests/abc251/tasks/abc251_e"&gt;問題E&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://atcoder.jp/contests/abc251/submissions/31695236"&gt;復習提出&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二部探索?&lt;/li&gt;
&lt;li&gt;動的計画法?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i=1&lt;/code&gt;と&lt;code&gt;i=N&lt;/code&gt;の処理をどうするか&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;i=1&lt;/code&gt;を採用したときと&lt;code&gt;i=N&lt;/code&gt;を採用したときの2つのパターンで動的計画法を解くことが解法でした。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp line-numbers"&gt;public static void Solve()
{
    var N = Scanner.Scan&amp;lt;int&amp;gt;();
    var A = Scanner.ScanEnumerable&amp;lt;long&amp;gt;().ToArray();
    const long inf = (long)1e18;

    var answer = inf;
    for (var k = 0; k &amp;lt; 2; k++)
    {
        var dp = new long[N + 10, 2];
        if (k == 0)
        {
            dp[1, 0] = 0;
            dp[1, 1] = inf;
        }
        else
        {
            dp[1, 0] = inf;
            dp[1, 1] = A[0];
        }

        for (var i = 1; i &amp;lt; N; i++)
        {
            dp[i + 1, 0] = dp[i, 1];
            dp[i + 1, 1] = Math.Min(dp[i, 0], dp[i, 1]) + A[i];
        }

        if (k == 0) answer = Math.Min(answer, dp[N, 1]);
        else answer = Math.Min(answer, Math.Min(dp[N, 0], dp[N, 1]));
    }

    Console.WriteLine(answer);
}
&lt;/code&gt;&lt;/pre&gt;
</content>
		<summary>&lt;p&gt;AtCoder Beginner Contest 251の復習記事です。&lt;/p&gt;</summary>
	</entry>
</feed>